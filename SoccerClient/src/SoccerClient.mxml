<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:local="*"
			   width="760" height="650" applicationComplete="ApplicationCompleteHandler(event)"
			   frameRate="30" preloader="ProgressPreloader">
	
	<fx:Metadata>
		[ResourceBundle("main")]
		[ResourceBundle("training")]
		[ResourceBundle("teams")]
		[ResourceBundle("matchmsgs")]
	</fx:Metadata>
	
	<!-- Todas las fuentes se embeben aquí -->
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		
		@font-face {
			src:url("/Assets/Fonts/HelveticaNeueLT/lte50874.ttf");
			fontFamily: MyFontHelveticaNeueLTBold;
			font-weight: bold;
			embedAsCFF: true;
		}		
	</fx:Style>
	
	<fx:Script><![CDATA[ 
		import GameModel.FriendsModel;
		import GameModel.MainGameModel;
		import GameModel.RealtimeModel;
		
		import GameView.MainView;
		
		import HttpService.DataTypeInitializer;
		
		import Match.MatchMain;
		
		import mx.core.FlexGlobals;
		import mx.events.FlexEvent;
		import mx.messaging.Channel;
		import mx.messaging.ChannelSet;
		import mx.messaging.config.ServerConfig;
		
		protected function ApplicationCompleteHandler(event:FlexEvent):void
		{
			// FPSCounter.Init(this.stage, new Point(0,0));
						
			// Excepciones globales capturadas
			if (loaderInfo.hasOwnProperty("uncaughtErrorEvents"))
				IEventDispatcher(loaderInfo["uncaughtErrorEvents"]).addEventListener("uncaughtError", ErrorMessages.UncaughtErrorHandler);
			
			// Si se dispara esta señal, la dispare quien la dispare, nos quedamos en blanco
			ErrorMessages.OnCleaningShutdownSignal.addOnce(OnCleaningShutdown);
			
			// Carga de parametros y configuracion global
			AppConfig.Init(parameters);

			// Podemos ir cargando recursos que luego necesitaremos
			MatchMain.LoadMatchResources(null);
			
			// Para que las estructuras creadas por weborb existan
			var dataTypeInit : DataTypeInitializer = new DataTypeInitializer();

			if (AppConfig.TEST != null)
			{
				mFacebookFacade = new FacebookFacade();
				mMainGameModel = new MainGameModel();
				
				MyServerTests.visible = true;
				MyServerTests.ExecuteTest(AppConfig.TEST);
			}
			else
			{
				// Desde el servidor nos pueden decir a qué servidor Realtime nos tenemos que conectar. Si no, nos conectaremos a la propia URL
				// desde donde se está cargando el SWF (se encarga la propia RealtimeModel.GetDefaultURI)
				if (AppConfig.REALTIME_SERVER != null && AppConfig.REALTIME_SERVER != "")
					RealtimeModel.SetDefaultURI(AppConfig.REALTIME_SERVER + ":2020");
				
				// Cogemos la SessionKey del parametro que nos pasa el servidor por flashVars
				SetWeborbSessionKey();
				
				//Santi: Iniciamos 
				mFacebookFacade = new FacebookFacade();
				//mFacebookFacade.FacebookID = AppConfig.GAMER_ID; // probando con GAMERID, si este no nos vale cuando pruebe con mas jugadores, necesitaré a lo mejor el USERID
				//mFacebookFacade.SessionKey = AppConfig.SESSION_KEY;
				OnFacebookInitSuccess();
			}
		}
		
		public function SetWeborbSessionKey() : void
		{
			// En caso de entrar por https, hay que asegurar que el channel es del tipo SecureAMFChannel
			if (FlexGlobals.topLevelApplication.url.indexOf("https") != -1)
				ServerConfig.xml[0].channels.channel.(@id=='my-amf').@type = "mx.messaging.channels.SecureAMFChannel";
			
			var current : String = ServerConfig.xml[0].channels.channel.(@id=='my-amf').endpoint.@uri;
			
			// Cuando nos llaman una segunda vez debido a un Fault o a un ServerTest
			if (current.indexOf("?") != -1)
				current = current.substr(0, current.indexOf("?")); 
			
			ServerConfig.xml[0].channels.channel.(@id=='my-amf').endpoint.@uri = current + "?SessionKey=" + AppConfig.SESSION_KEY;
			
			var channelSet : ChannelSet = ServerConfig.getChannelSet("GenericDestination");
			channelSet.disconnectAll();
			
			var theChannel : Channel = ServerConfig.getChannel("my-amf");
			theChannel.uri = ServerConfig.xml[0].channels.channel.(@id=='my-amf').endpoint.@uri;
		}
		
		private function OnFacebookInitSuccess():void
		{
			ConfigureLocale();
			GameMetrics.Init(this);	
			
			mMainGameModel = new MainGameModel();
			mMainGameModel.InitialRefresh(OnInitialRefreshSuccess);
						
			function OnInitialRefreshSuccess() : void
			{
				mMainView = new MainView();
				addElement(mMainView);
				/*if (ExternalInterface.available) {
					var friendsData:Object = ExternalInterface.call("getUsersData");	
				}*/
			}
		}
		 
		private function ConfigureLocale() : void
		{
			// El servidor siempre nos pasa un locale coherente con el VERSION_ID, aqui no tenemos que hacer nada
			resourceManager.localeChain = GetLocaleChain(AppConfig.LOCALE);

			function GetLocaleChain(locale : String) : Array
			{
				// El idioma que soportamos es el [0], los fallback que aplicara Flex cuando no 
				// encuentra un recurso en ese idioma estan a continuacion 
				var chains : Array = [ 
										["en_US", "es_ES"],
										["es_ES", "en_US"],				// Español MahouLigachapas
										["es_LA", "es_ES", "en_US"],	// Español mundo
									];
				
				var ret : Array = null;
				
				for each(var chain : Array in chains)
				{
					if (chain[0] == locale)
					{
						ret = chain;
						break;
					}
				}
				
				// Por completitud: Si no es uno de los soportados, devolvemos nuestra cadena ingles-español favorita,
				// pero esto no deberia pasar jamas.
				if (ret == null)
				{
					ErrorMessages.LogToServer("WARNING: Unrecognized locale from server " + locale);
					ret = ["en_US", "es_ES"];
				}
				
				return ret;
			}
		}
		
		private function OnCleaningShutdown() : void
		{
			if (mMainGameModel != null)
			{
				mMainGameModel.OnCleaningShutdown();
				mMainGameModel = null;
			}
			
			// Quitamos la mMainView pero tb todos los posibles popups q hubiera
			removeAllElements();
			mMainView = null;
		}
		
		
		private var mMainView : MainView;
		
		/// En vez de andar pasándolo por ahí en Inits, singletonizamos
		static private var mMainGameModel : MainGameModel;
		static public function GetMainGameModel() : MainGameModel {	return mMainGameModel; }
		
		// Idem
		static private var mFacebookFacade : FacebookFacade;
		static public function GetFacebookFacade() : FacebookFacade { return mFacebookFacade; }
	
	]]></fx:Script>
	
	<s:BitmapImage source="{resourceManager.getClass('main','BackGeneral')}" fillMode="clip" top="131"/>
	
	<local:ServerTests id="MyServerTests" visible="false" width="100%" height="100%"/>
			
</s:Application>
