<?xml version="1.0" encoding="utf-8"?>
<s:Group width="100%" height="100%"
		 xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:local="*" xmlns:GameView="GameView.*" xmlns:Team="GameView.Team.*" xmlns:Training="GameView.Training.*"
		 xmlns:Competition="GameView.Competition.*" xmlns:Friendly="GameView.Friendly.*" xmlns:Match="GameView.Match.*"
		 creationComplete="CreationCompleteHandler(event)" currentState="Waiting" >
	
	<fx:Style source="styles.css" />
	
	<s:states>
		<s:State name="Waiting"/>
		<s:State name="Login"/>
		<s:State name="Competition" stateGroups="InGame"/>
		<s:State name="Team" stateGroups="InGame"/>
		<s:State name="Friendly" stateGroups="InGame"/>
		<s:State name="Training" stateGroups="InGame"/>
		<s:State name="TrainingSpecial" stateGroups="InGame"/>
		<s:State name="OnRealtimeMatch"/>
		<s:State name="Ranking" stateGroups="InGame"/>
	</s:states>

	<fx:Script><![CDATA[
		import GameModel.MainGameModel;
		
		import GameView.Match.MatchEndDialog;
		import GameView.Training.SpecialTrainingCompleteDialog;
		
		import HttpService.TransferModel.vo.SpecialTrainingDefinition;
		
		import mx.events.FlexEvent;
		
		import spark.events.IndexChangeEvent;
			
		protected function CreationCompleteHandler(event:FlexEvent):void
		{
			mMainGameModel = SoccerClient.GetMainGameModel();
			
			// Si tenemos equipo, estara ya refrescado en el callback
			mMainGameModel.TheTeamModel.HasTeam(OnHasTeamResponse);
			
			// Al inicio o fin del partido, cambiamos de estado en el UI directamente desde aquÃ­
			mMainGameModel.TheRealtimeModel.MatchStarted.add(OnMatchStarted);
			mMainGameModel.TheRealtimeModel.MatchEnded.add(OnMatchEnded);
			
			// El mensaje de entrenamiento especial completado se captura globalmente porque el Like puede ocurrir en cualquier momento
			mMainGameModel.TheSpecialTrainingModel.SpecialTrainingCompleted.add(OnSpecialTrainingComplete);
		}
		
		private function OnSpecialTrainingComplete(specialTrainingDefinition : SpecialTrainingDefinition) : void
		{
			SpecialTrainingCompleteDialog.Show(specialTrainingDefinition);
		}
		
		private function OnHasTeamResponse(hasTeam : Boolean):void
		{
			if (hasTeam)
				currentState = "Competition";
			else
				currentState = "Login";
		}
		
		private function OnMatchStarted() : void
		{
			currentState = "OnRealtimeMatch";
		}
			
		private function OnMatchEnded(matchResult:Object) : void
		{
			MatchEndDialog.Show(matchResult);
				
			if (matchResult.WasCompetition)
			{
				currentState = "Competition";
				MainMenuButtonBar.selectedIndex = 0;
			}
			else
			{
				currentState = "Friendly";
				MainMenuButtonBar.selectedIndex = 1;
			}
		}

		protected function ButtonbarChangeHandler(event:IndexChangeEvent):void
		{
			if (MainMenuButtonBar.selectedItem == null)
				return;
			
			// Hemos comprobado que puede llegarnos este mensaje cuando esta el partido ya en curso, probablemente por una cuestion de orden
			// de eventos. Obviamente durante el partido no se puede cambiar el estado de la botonera, asi que lo ignoramos
			if (mMainGameModel.TheRealtimeModel != null && mMainGameModel.TheRealtimeModel.TheMatch != null)
				return;
			
			mMainGameModel.TheInactivityModel.LogNewActivity();
			
			
			if (MainMenuButtonBar.selectedItem.menuId == "Competition")
				currentState = "Competition";
			else
			if (MainMenuButtonBar.selectedItem.menuId == "Team")
				currentState = "Team";
			else
			if (MainMenuButtonBar.selectedItem.menuId == "Friendly")
				currentState = "Friendly";
			else
			if (MainMenuButtonBar.selectedItem.menuId == "Training")
				currentState = "Training";
			else
			if (MainMenuButtonBar.selectedItem.menuId == "TrainingSpecial")
				currentState = "TrainingSpecial";
			else
			if  (MainMenuButtonBar.selectedItem.menuId == "HallOfFame")
				currentState = "Ranking";
		}
		
		public function ChangeStateToSpecialTrainings() : void
		{
			MainMenuButtonBar.selectedIndex = 4;
			currentState = "TrainingSpecial";
		}
		
		public function ChangeStateToRanking() : void
		{
			MainMenuButtonBar.selectedIndex = -1;
			currentState = "Ranking";
		}
		
		private var mMainGameModel : MainGameModel;

	]]></fx:Script>
	
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
		
	<GameView:Login id="MyLogin" includeIn="Login" />

	<GameView:StatusPanel height="80" includeIn="InGame, OnRealtimeMatch"/>
	
	<Match:RealtimeMatch width="760" includeIn="OnRealtimeMatch" />
	
	<s:Group width="760" height="51" includeIn="InGame">
		<s:BitmapImage source="@Embed(source='/Assets/General.swf', symbol='StatusPanelBackgroundBottom')" fillMode="clip" />
		
		<s:ButtonBar id="MainMenuButtonBar" skinClass="GameView.Skins.MainMenuBarSkin" change="ButtonbarChangeHandler(event)" requireSelection="true"
					 horizontalCenter="0" verticalCenter="0" includeIn="InGame" creationComplete="MainMenuButtonBar.selectedIndex=0" labelField="label" >
			<s:dataProvider>
				<s:ArrayList>
					<fx:Object menuId="Competition" label="{resourceManager.getString('main','GeneralCompetition')}" image="@Embed(source='/Assets/General.swf', symbol='MainMenuButtonCompeticionOff')" imageOn="@Embed(source='/Assets/General.swf', symbol='MainMenuButtonCompeticionOn')"/>
					<fx:Object menuId="Friendly" label="{resourceManager.getString('main','GeneralFriendly')}" image="@Embed(source='/Assets/General.swf', symbol='MainMenuButtonAmistosoOff')" imageOn="@Embed(source='/Assets/General.swf', symbol='MainMenuButtonAmistosoOn')"/>
					<fx:Object menuId="Team" label="{resourceManager.getString('main','GeneralTeam')}" image="@Embed(source='/Assets/General.swf', symbol='MainMenuButtonEquipoOff')" imageOn="@Embed(source='/Assets/General.swf', symbol='MainMenuButtonEquipoOn')"/>
					<fx:Object menuId="Training" label="{resourceManager.getString('main','GeneralTraining')}" image="@Embed(source='/Assets/General.swf', symbol='MainMenuButtonEntrenamientoOff')" imageOn="@Embed(source='/Assets/General.swf', symbol='MainMenuButtonEntrenamientoOn')"/>
					<fx:Object menuId="TrainingSpecial" label="{resourceManager.getString('main','GeneralSpecialSkill')}" image="@Embed(source='/Assets/General.swf', symbol='MainMenuButtonHabilidadesOff')" imageOn="@Embed(source='/Assets/General.swf', symbol='MainMenuButtonHabilidadesOn')"/>
					<fx:Object menuId="HallOfFame" label="{resourceManager.getString('main','GeneralRanking')}" image="@Embed(source='/Assets/General.swf', symbol='MainMenuButtonRankingOff')" imageOn="@Embed(source='/Assets/General.swf', symbol='MainMenuButtonRankingOn')"/>
				</s:ArrayList>
			</s:dataProvider>
		</s:ButtonBar>
	</s:Group>
	
	<s:Group includeIn="InGame">
		<s:BitmapImage source="{resourceManager.getClass('main','BackGeneral')}" fillMode="clip"/>
		
		<GameView:NewsMarquee x="15" y="8" left="0" right="0" />
		
		<Competition:Competition id="CompetitionView" includeIn="Competition" top="30" itemCreationPolicy="immediate"/>
		<Team:Team id="TeamView" includeIn="Team" top="30" itemCreationPolicy="immediate"/>
		<Friendly:Friendly id="FriendlyView" includeIn="Friendly" top="30" itemCreationPolicy="immediate"/>
		<Training:Training id="TrainingView" includeIn="Training" top="30" itemCreationPolicy="immediate"/>
		<Training:TrainingSpecial id="TrainingSpecialView" includeIn="TrainingSpecial" top="30" itemCreationPolicy="immediate"/>
		<GameView:Ranking id="RankingView" includeIn="Ranking" top="30" itemCreationPolicy="immediate" />
		<GameView:BannerPannel x="0" y="0" />
	</s:Group>
	
	
	
</s:Group>
