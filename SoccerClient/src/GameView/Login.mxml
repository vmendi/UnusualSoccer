<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%"
		 currentState="Step1"
		 addedToStage="AddedToStageHandler(event)"
		 creationComplete="CreationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import GameModel.LoginModel;
			import GameModel.MainGameModel;
			import GameModel.PredefinedTeamsModel;
			
			import HttpService.enum.VALID_NAME;
			
			import mx.binding.utils.BindingUtils;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			protected function CreationCompleteHandler(event:FlexEvent):void
			{
				mMainGameModel = SoccerClient.GetMainGameModel();
				mLoginModel = mMainGameModel.TheLoginModel; 
				mPredefinedTeamsModel = mMainGameModel.ThePredefinedTeamsModel;
				
				mAgeValidity = !AppConfig.IsMahouLigaChapas;
				
				MyPredefinedTeamList.addEventListener(IndexChangeEvent.CHANGE, OnMyPredefinedTeamListSelectionChanged);
				
				// Get the country from the server, pre-select the country in our list
				var countryID : String = mPredefinedTeamsModel.TranslateCountryISOCodeToCountryID(AppConfig.COUNTRY);
				MyPredefinedTeamList.selectedIndex = mPredefinedTeamsModel.PredefinedTeamNameIDs.getItemIndex(countryID);

				BindingUtils.bindSetter(OnIsValidTeamNameLastResult, mLoginModel, ["IsValidTeamNameLastResult"]);
			}

			protected function AddedToStageHandler(event:Event):void
			{
				GameMetrics.ReportEvent(GameMetrics.LOGIN_SCREEN, null);
				GameMetrics.ReportPageView(GameMetrics.VIEW_LOGIN);
			}
			
			protected function OnMyPredefinedTeamListSelectionChanged(e:IndexChangeEvent):void
			{
				OnIsValidTeamNameLastResult(mLoginModel.IsValidTeamNameLastResult);
			}
			
			private function OnIsValidTeamNameLastResult(validity : String) : void
			{				
				if (MyPredefinedTeamList.selectedIndex != -1)
				{
					if (validity == VALID_NAME.VALID)
						SetNameValidity(true, resourceManager.getString('main','LoginNameAvailable'));
					else if (validity == VALID_NAME.GUEST)
						SetNameValidity(true, resourceManager.getString('main','LoginNameIsGuest'));
					else if (validity == VALID_NAME.EMPTY)
						SetNameValidity(false, resourceManager.getString('main','LoginEnterName'));	
					else if (validity == VALID_NAME.DUPLICATED)
						SetNameValidity(false, resourceManager.getString('main','LoginNotAvailable'));	
					else if (validity == VALID_NAME.INAPPROPIATE)
						SetNameValidity(false, resourceManager.getString('main','LoginInappropriateName'));
					else if (validity == VALID_NAME.TOO_SHORT)
						SetNameValidity(false, resourceManager.getString('main','LoginNameTooShort'));
					else if (validity == VALID_NAME.WHITE_SPACE_TRIM)
						SetNameValidity(false, resourceManager.getString('main','LoginNameBlank'));
					else if (validity == VALID_NAME.TOO_MANY_WHITESPACES)
						SetNameValidity(false, resourceManager.getString('main','LoginNameBlankSpaces'));
					else
						SetNameValidity(false, resourceManager.getString('main','LoginInvalidName'));
				}
				else
				{
					SetNameValidity(false, resourceManager.getString('main','LoginSelectNation'));
				}
			}
			
			private function SetNameValidity(valid : Boolean, text : String) : void
			{
				MyValidityLabel.text = text;
				mNameValidity = valid;
				
				if (valid)
					MyValidityLabel.setStyle("color", "#0DBF00");
				else
					MyValidityLabel.setStyle("color", "#E26261");
			}
						
			protected function MyRadioButtonYes_changeHandler(event:Event):void
			{
				mAgeValidity = true;
			}
			
			protected function MyRadioButtonNo_changeHandler(event:Event):void
			{
				mAgeValidity = false;
			}
			
			protected function MyTeamNameInput_changeHandler(event:TextOperationEvent):void
			{				
				mLoginModel.IsValidTeamName(MyTeamNameInput.text);
			}
			
			protected function MyButtonNext_clickHandler(event:MouseEvent):void
			{
				mWaitingForTeamCreation = true;
				
				mMainGameModel.TheTeamModel.CreateTeam(MyTeamNameInput.text != ""? MyTeamNameInput.text : LoginModel.GUEST_NAME, 
													   MyPredefinedTeamList.selectedItem, 
												   	   OnTeamCreatedResponse, OnTeamCreationFailed);
			}
			
			protected function MyButtonNextStep1_clickHandler(event:MouseEvent):void
			{
				currentState="Step2";
			}
			
			private function OnTeamCreationFailed() : void
			{
				mWaitingForTeamCreation = false;
			}
			
			private function OnTeamCreatedResponse():void
			{
				GameMetrics.ReportEvent(GameMetrics.TEAM_SELECTED, {predefinedTeamID: MyPredefinedTeamList.selectedItem});
				GameMetrics.Set(GameMetrics.PEOPLE_TEAM, MyPredefinedTeamList.selectedItem);
				
				(HierarchyUtils.FindParentOfType(this, getQualifiedClassName(MainView)) as MainView).StartFirstGameAfterLogin();
			}
			
			[Bindable] private var mMainGameModel : MainGameModel;
			[Bindable] private var mLoginModel : LoginModel;
			[Bindable] private var mPredefinedTeamsModel : PredefinedTeamsModel;
			
			[Bindable] private var mNameValidity : Boolean = false;
			[Bindable] private var mAgeValidity : Boolean = false;
			[Bindable] private var mWaitingForTeamCreation : Boolean = false;
		]]>
	</fx:Script>
	
	<fx:Style source="styles.css"/>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		
		.headerBox {
			font-family:MyFontHelveticaNeueLTBold;
			font-size:15pt;
			font-weight:bold;
			color:#FFFFFF;
		}
	</fx:Style>
	
	<fx:Declarations>
		<s:DropShadowFilter id="MyTextDropShadowFilter" angle="270" blurX="1" blurY="1"
							color="0x444444" distance="1"/>
	</fx:Declarations>	
	
	<s:states>
		<s:State name="Step1"></s:State>
		<s:State name="Step2"></s:State>
	</s:states>
	
	<s:BitmapImage fillMode="clip" source="{resourceManager.getClass('main','LoginBg')}"/>
	
	<s:Group id="MyStep1"
			 horizontalCenter="0" y="60" 
			 visible.Step1="true"
			 visible.Step2="false">
		<s:Panel width="720" height="440" skinClass="GameView.Skins.DefaultPanelSkin"
				 title="{resourceManager.getString('main','Login01SelectTeam')}">
			<s:List id="MyPredefinedTeamList" left="0" width="720" height="380" tabEnabled="false" tabFocusEnabled="false"
					dataProvider="{mPredefinedTeamsModel.PredefinedTeamNameIDs}"
					itemRenderer="GameView.PredefinedTeamItem" skinClass="GameView.Skins.DefaultListSkin"
					verticalScrollPolicy="off">
				<s:layout>
					<s:TileLayout />
				</s:layout>
			</s:List>
			<s:Button id="MyButtonNextStep1" bottom="10" horizontalCenter="0" width="160" height="24"
					  label="{resourceManager.getString('main','Continue')}"
					  click="MyButtonNextStep1_clickHandler(event)"
					  skinClass="GameView.Skins.ButtonGreySkin" />
		</s:Panel>
	</s:Group>
	
	<s:Group id="MyStep2"
			 horizontalCenter="0" y="160" 
			 visible.Step1="false"
			 visible.Step2="true">
		<s:Panel width="660" skinClass="GameView.Skins.DefaultPanelSkin"
				 title="{resourceManager.getString('main','Login02EnterName')}">
			<s:BitmapImage left="10" bottom="0" source="@Embed(source='/Assets/General.swf', symbol='TutorialHost')" fillMode="clip" />
			<s:Group right="20" top="10">
				<s:layout>
					<s:VerticalLayout gap="6" horizontalAlign="center"/>
				</s:layout>
				<s:Label id="myStep2Txt" x="10" y="35" width="470" styleName="whiteBoldBig"
						 text="{resourceManager.getString('main','Login02EnterNameTxt')}"
						 textAlign="center" verticalAlign="middle"></s:Label>
				
				<s:TextInput id="MyTeamNameInput" x="82" y="97" width="200"
							 change="MyTeamNameInput_changeHandler(event)" maxChars="30"
							 styleName="blackBoldMediumHN" prompt="{LoginModel.GUEST_NAME}"/>
				
				<s:Label id="MyValidityLabel" x="32" y="126" width="470" height="40" color="#0DBF00"
						 styleName="whiteBoldBig" textAlign="center"/>
				<s:Button id="MyButtonNext" horizontalCenter="0" bottom="10" width="160" height="24"
						  label="{resourceManager.getString('main','Continue')}"
						  click="MyButtonNext_clickHandler(event)" enabled="{mAgeValidity &amp;&amp; mNameValidity}"
						  skinClass="GameView.Skins.ButtonGreySkin"/>
			</s:Group>
			
			<s:Group visible="{AppConfig.IsMahouLigaChapas}" x="0"
					 includeInLayout="{AppConfig.IsMahouLigaChapas}">
				<s:Rect id="tbFill2" x="0" y="0" width="100%" height="27">
					<s:fill>
						<s:LinearGradient rotation="90">
							<s:GradientEntry alpha="1" color="#fe0001" ratio="0"/>
							<s:GradientEntry alpha="1" color="#8c1304" ratio="1.0"/>
						</s:LinearGradient>
					</s:fill>
				</s:Rect>
				<s:Label id="myStep3Label" x="10" y="0" width="350" height="27"
						 filters="{MyTextDropShadowFilter}" maxDisplayedLines="1" styleName="headerBox"
						 text="3. ACEPTA LAS CONDICIONES LEGALES" textAlign="start"
						 verticalAlign="middle"></s:Label>
				
				<s:Label id="myStep3Txt" x="10" y="32" width="350" styleName="whiteBoldBig"
						 text="Para jugar a este juego debes ser mayor de edad." textAlign="center"
						 verticalAlign="middle"></s:Label>
				
				<s:Label id="myStep4Txt" x="100" y="56" styleName="whiteBoldBig" text="¿Lo eres?"
						 textAlign="center" verticalAlign="middle"></s:Label>
				
				<s:RadioButton id="myRadioButtonYes" x="170" y="52" label="Sí"
							   change="MyRadioButtonYes_changeHandler(event)" groupName="SoyMayorEdad"
							   styleName="whiteBoldBig"/>
				<s:RadioButton id="myRadioButtonNo" x="210" y="52" label="No"
							   change="MyRadioButtonNo_changeHandler(event)" groupName="SoyMayorEdad"
							   styleName="whiteBoldBig"/>
			</s:Group>
		</s:Panel>
	</s:Group>
	
	<s:transitions>
		<s:Transition fromState="Step1" interruptionBehavior="stop" toState="Step2">
			<s:Parallel>
				<s:Fade duration="250" target="{MyStep1}"/>
				<s:Fade duration="250" startDelay="250" target="{MyStep2}"/>
			</s:Parallel>
		</s:Transition>
	</s:transitions>
	
</s:Group>


