<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%"
		 currentState="In"
		 addedToStage="AddedToStageHandler(event)"
		 creationComplete="CreationCompleteHandler(event)" xmlns:GameView="GameView.*"
		 >
	
	<fx:Script>
		<![CDATA[
			import GameModel.LoginModel;
			import GameModel.MainGameModel;
			import GameModel.PredefinedTeamsModel;
			
			import HttpService.enum.VALID_NAME;
			
			import mx.binding.utils.BindingUtils;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			protected function CreationCompleteHandler(event:FlexEvent):void
			{
				mMainGameModel = SoccerClient.GetMainGameModel();
				mLoginModel = mMainGameModel.TheLoginModel; 
				mPredefinedTeamsModel = mMainGameModel.ThePredefinedTeamsModel;
				
				mAgeValidity = !AppConfig.IsMahouLigaChapas;
								
				// Get the country from the server, pre-select the country in our list
				mCurrentTeamID =  mPredefinedTeamsModel.TranslateCountryISOCodeToCountryID(AppConfig.COUNTRY);
				
				BindingUtils.bindSetter(OnIsValidTeamNameLastResult, mLoginModel, ["IsValidTeamNameLastResult"]);
				
				// To run the first transition
				currentState = "CreateTeam";
			}

			protected function AddedToStageHandler(event:Event):void
			{
				GameMetrics.ReportEvent(GameMetrics.LOGIN_SCREEN, null);
				GameMetrics.ReportPageView(GameMetrics.VIEW_LOGIN);
			}
			
			private function OnIsValidTeamNameLastResult(validity : String) : void
			{	
				// If we were waiting for team creating, now we are not
				mWaitingForTeamCreation = false;
				
				if (MyPredefinedTeamList.selectedIndex != -1)
				{
					if (validity == VALID_NAME.VALID)
						SetNameValidity(true, resourceManager.getString('main','LoginNameAvailable')); 
					else if (validity == VALID_NAME.EMPTY)
						SetNameValidity(true, resourceManager.getString('main','LoginEnterName'));		// Empty es valido, cogemos el mLoginModel.DefaultName
					else if (validity == VALID_NAME.DUPLICATED)
						SetNameValidity(false, resourceManager.getString('main','LoginNotAvailable'));	
					else if (validity == VALID_NAME.INAPPROPIATE)
						SetNameValidity(false, resourceManager.getString('main','LoginInappropriateName'));
					else if (validity == VALID_NAME.TOO_SHORT)
						SetNameValidity(false, resourceManager.getString('main','LoginNameTooShort'));
					else if (validity == VALID_NAME.WHITE_SPACE_TRIM)
						SetNameValidity(false, resourceManager.getString('main','LoginNameBlank'));
					else if (validity == VALID_NAME.TOO_MANY_WHITESPACES)
						SetNameValidity(false, resourceManager.getString('main','LoginNameBlankSpaces'));
					else
						SetNameValidity(false, resourceManager.getString('main','LoginInvalidName'));
				}
				else
				{
					SetNameValidity(false, resourceManager.getString('main','LoginSelectNation'));
				}
			}
			
			private function SetNameValidity(valid : Boolean, text : String) : void
			{
				MyValidityLabel.text = text;
				mNameValidity = valid;
				
				if (valid)
					MyValidityLabel.setStyle("color", "#0DBF00");
				else
					MyValidityLabel.setStyle("color", "#E26261");
			}
						
			protected function MyRadioButtonYes_changeHandler(event:Event):void
			{
				mAgeValidity = true;
			}
			
			protected function MyRadioButtonNo_changeHandler(event:Event):void
			{
				mAgeValidity = false;
			}
			
			protected function MyTeamNameInput_changeHandler(event:TextOperationEvent):void
			{
				mLoginModel.IsValidTeamName(MyTeamNameInput.text);
			}
			
			protected function MyButtonCreateTeam_clickHandler(event:MouseEvent):void
			{
				currentState="Out";
			}
			
			protected function fade_effectEndHandler(event:EffectEvent):void
			{
				mWaitingForTeamCreation = true;
				
				mLoginModel.CreateTeam(MyTeamNameInput.text != ""? MyTeamNameInput.text : mLoginModel.DefaultName, 
								       MyPredefinedTeamList.selectedItem, 
									   OnTeamCreatedSuccess);
			}
			
			protected function MyButtonSelectCountry_clickHandler(event:MouseEvent):void
			{
				GameMetrics.ReportEvent(GameMetrics.NATION_SELECTED, {predefinedTeamID: MyPredefinedTeamList.selectedItem});
				
				mCurrentTeamID = MyPredefinedTeamList.selectedItem;
				
				currentState="CreateTeam";
			}

			protected function MyCancelSelectCountry_clickHandler(event:MouseEvent):void
			{
				currentState="CreateTeam";
			}
						
			protected function MyButtonChange_clickHandler(event:MouseEvent):void
			{
				currentState="SelectCountry";
			}
						
			private function OnTeamCreatedSuccess():void
			{
				mWaitingForTeamCreation = false;
				
				GameMetrics.ReportEvent(GameMetrics.TEAM_SELECTED, {predefinedTeamID: MyPredefinedTeamList.selectedItem});
				GameMetrics.Set(GameMetrics.PEOPLE_TEAM, MyPredefinedTeamList.selectedItem);
				
				(HierarchyUtils.FindParentOfType(this, getQualifiedClassName(MainView)) as MainView).StartFirstGameAfterLogin();
			}
			
			[Bindable] private var mMainGameModel : MainGameModel;
			[Bindable] private var mLoginModel : LoginModel;
			[Bindable] private var mPredefinedTeamsModel : PredefinedTeamsModel;
			
			[Bindable] private var mNameValidity : Boolean = false;
			[Bindable] private var mAgeValidity : Boolean = false;
			[Bindable] private var mWaitingForTeamCreation : Boolean = false;
			
			[Bindable] private var mCurrentTeamID : String;
			
		]]>
	</fx:Script>
	
	<fx:Style source="styles.css"/>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		
		.headerBox {
			font-family:MyFontHelveticaNeueLTBold;
			font-size:15pt;
			font-weight:bold;
			color:#FFFFFF;
		}
		
		.blackBoldMediumHN:normalWithPrompt {
			color: #777777;
			fontStyle: normal;
		}
	</fx:Style>
	
	<fx:Declarations>
		<s:DropShadowFilter id="MyTextDropShadowFilter" angle="270" blurX="1" blurY="1"
							color="0x444444" distance="1"/>
		<s:GlowFilter id="glowNormal" strength="1" alpha="0.7" blurX="10" blurY="10" color="#FFCB04"/>
	</fx:Declarations>	
	
	<s:states>
		<s:State name="In"></s:State>
		<s:State name="CreateTeam"></s:State>
		<s:State name="SelectCountry"></s:State>
		<s:State name="Out"></s:State>
	</s:states>
	
	<s:BitmapImage fillMode="clip" source="{resourceManager.getClass('main','LoginBg')}"/>
	
	<s:Graphic id="MyBlackRect"
		alpha.In="0"
		alpha.CreateTeam="0.6"
		alpha.SelectCountry="0.6"
		alpha.Out="1">
		<s:Rect x="0" y="0" width="760" height="650">
			<s:fill>
				<s:SolidColor color="#000000" />
			</s:fill>
		</s:Rect>
	</s:Graphic>
	
	<s:Group id="MyCreateTeam"
			 x="80" y="206" width="600"
			 visible.In="false"
			 visible.CreateTeam="true"
			 visible.SelectCountry="false"
			 visible.Out="false">
		<GameView:PopupBackground left="-10" right="-10" top="-20" bottom="-20" />
		<s:BitmapImage left="-10" bottom="-18" source="@Embed(source='/Assets/General.swf', symbol='TutorialHost')" fillMode="clip" />
		<s:Label id="myStep2Label" right="20" top="-5" width="420"
				 filters="{glowNormal}" maxDisplayedLines="1"
				 styleName="yellowBoldHuge"
				 text="{resourceManager.getString('main','LoginCreateTeam')}"
				 textAlign="center"/>
		<s:Group right="20" top="30">
			<s:layout>
				<s:VerticalLayout gap="15" horizontalAlign="center"/>
			</s:layout>
				<!-- text="{resourceManager.getString('main','Login02EnterName')}" -->

				<!--<s:Label id="myStep2Txt" x="10" y="35" width="470" styleName="whiteBoldBig"
						 text="{resourceManager.getString('main','Login02EnterNameTxt')}"
						 textAlign="center" verticalAlign="middle"></s:Label>-->
			<s:Group>
				<s:layout>
					<s:VerticalLayout gap="5" horizontalAlign="left" />
				</s:layout>
				<s:Group>
					<s:layout>
						<s:HorizontalLayout gap="10" verticalAlign="middle" />
					</s:layout>
					<s:Label width="110" verticalAlign="middle"
								 maxDisplayedLines="1"
								 styleName="whiteBoldBig"
								 text="{resourceManager.getString('main','Login01SelectTeam')}:" />
					<s:Group>
						<s:layout>
							<s:HorizontalLayout gap="4" verticalAlign="middle" />
						</s:layout>
						<GameView:PredefinedTeamItem 
									  id="MyPredefinedTeamItem"
									  data="{mCurrentTeamID}"
									  click="MyButtonChange_clickHandler(event)" />
						<s:Button id="MyButtonChange" horizontalCenter="0" bottom="10" height="24"
									  label="{resourceManager.getString('main','LoginChange')}"
									  skinClass="GameView.Skins.ButtonGreySkin"
									  click="MyButtonChange_clickHandler(event)"/>
					</s:Group>
				</s:Group>
				<s:Group>
					<s:layout>
						<s:HorizontalLayout gap="10" verticalAlign="middle" />
					</s:layout>
					<s:Label width="110"
								 maxDisplayedLines="1"
								 styleName="whiteBoldBig"
								 text="{resourceManager.getString('main','Login02EnterName')}:" />
					<s:TextInput id="MyTeamNameInput" width="200" height="24"
									 change="MyTeamNameInput_changeHandler(event)" maxChars="30"
									 prompt="{mLoginModel.DefaultName}" styleName="blackBoldMediumHN" />
				</s:Group>
			</s:Group>
			<s:Label id="MyValidityLabel" x="32" y="126" width="420" maxDisplayedLines="1" color="#FFFFFF"
					 text="{resourceManager.getString('main','Login02EnterNameTxt')}"
					 styleName="whiteBoldBig" textAlign="center"/>
			<s:Button id="MyButtonNext" horizontalCenter="0" bottom="10" width="160" height="24"
					  label="{resourceManager.getString('main','LoginCreateTeamButton')}"
					  click="MyButtonCreateTeam_clickHandler(event)" enabled="{mAgeValidity &amp;&amp; mNameValidity}"
					  skinClass="GameView.Skins.ButtonGreySkin"/>
		</s:Group>
			
		<s:Group visible="{AppConfig.IsMahouLigaChapas}" x="0"
				 includeInLayout="{AppConfig.IsMahouLigaChapas}">
			<s:Rect id="tbFill2" x="0" y="0" width="100%" height="27">
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry alpha="1" color="#fe0001" ratio="0"/>
						<s:GradientEntry alpha="1" color="#8c1304" ratio="1.0"/>
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
			<s:Label id="myStep3Label" x="10" y="0" width="350" height="27"
					 filters="{MyTextDropShadowFilter}" maxDisplayedLines="1" styleName="headerBox"
					 text="3. ACEPTA LAS CONDICIONES LEGALES" textAlign="start"
					 verticalAlign="middle"></s:Label>
			
			<s:Label id="myStep3Txt" x="10" y="32" width="350" styleName="whiteBoldBig"
					 text="Para jugar a este juego debes ser mayor de edad." textAlign="center"
					 verticalAlign="middle"></s:Label>
			
			<s:Label id="myStep4Txt" x="100" y="56" styleName="whiteBoldBig" text="¿Lo eres?"
					 textAlign="center" verticalAlign="middle"></s:Label>
			
			<s:RadioButton id="myRadioButtonYes" x="170" y="52" label="Sí"
						   change="MyRadioButtonYes_changeHandler(event)" groupName="SoyMayorEdad"
						   styleName="whiteBoldBig"/>
			<s:RadioButton id="myRadioButtonNo" x="210" y="52" label="No"
						   change="MyRadioButtonNo_changeHandler(event)" groupName="SoyMayorEdad"
						   styleName="whiteBoldBig"/>
		</s:Group>
	</s:Group>
	
	<s:Group id="MySelectCountry"
			 x="20" y="60" width="720"
			 visible.In="false"
			 visible.CreateTeam="false"
			 visible.SelectCountry="true"
			 visible.Out="false">
		<GameView:PopupBackground left="-10" right="-10" top="-16" bottom="-16" />
		<s:Group>
			<s:layout>
				<s:VerticalLayout gap="10" horizontalAlign="center"/>
			</s:layout>
			<s:Label id="myStep1Label" x="10" y="0" width="720" height="27"
					 filters="{MyTextDropShadowFilter}" maxDisplayedLines="1"
					 styleName="yellowBoldHuge"
					 text="{resourceManager.getString('main','Login01SelectTeam')}"
					 textAlign="center" verticalAlign="middle"></s:Label>
			<s:List id="MyPredefinedTeamList" left="0" width="720" height="425" tabEnabled="false" tabFocusEnabled="false"
					dataProvider="{mPredefinedTeamsModel.PredefinedTeamNameIDs}"
					selectedIndex="{mPredefinedTeamsModel.PredefinedTeamNameIDs.getItemIndex(mCurrentTeamID)}"
					itemRenderer="GameView.PredefinedTeamItem" skinClass="GameView.Skins.DefaultListSkin"
					verticalScrollPolicy="off">
				<s:layout>
					<s:TileLayout />
				</s:layout>
			</s:List>
			<s:Group>
				<s:layout>
					<s:HorizontalLayout gap="10" />
				</s:layout>
				<s:Button id="MyCancelSelectCountry" bottom="10" horizontalCenter="0" height="24"
						  label="{resourceManager.getString('main','Cancel')}"
						  click="MyCancelSelectCountry_clickHandler(event)"
						  skinClass="GameView.Skins.ButtonDarkGreySkin" />
				<s:Button id="MyButtonSelectCountry" bottom="10" horizontalCenter="0" height="24"
						  label="{resourceManager.getString('main','LoginSelectCountry')}"
						  click="MyButtonSelectCountry_clickHandler(event)"
						  skinClass="GameView.Skins.ButtonGreySkin" />
			</s:Group>
		</s:Group>
	</s:Group>
	
	<s:transitions>
		<s:Transition fromState="In" interruptionBehavior="stop" toState="CreateTeam">
			<s:Parallel>
				<s:Fade duration="250" target="{MyBlackRect}"/>
				<s:Parallel target="{MyCreateTeam}">
					<s:Fade duration="500" />
					<s:SetAction property="y" value="270"/>
					<s:Animate duration="250" >
						<s:easer>
							<s:Linear easeInFraction="0" easeOutFraction="1"/>
						</s:easer>
						<s:SimpleMotionPath property="x"/>
						<s:SimpleMotionPath property="y"/>
					</s:Animate>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="CreateTeam" interruptionBehavior="stop" toState="Out">
			<s:Parallel >
				<s:Fade duration="250" target="{MyBlackRect}" effectEnd="fade_effectEndHandler(event)"/>
			</s:Parallel>
		</s:Transition>
	</s:transitions>
	
</s:Group>


