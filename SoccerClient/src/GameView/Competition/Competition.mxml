<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:Competition="GameView.Competition.*"
		 width="100%" height="100%"
		 addedToStage="AddedToStageHandler(event)"
		 creationComplete="CreationCompleteHandler(event)"
		 currentState="Empty" xmlns:Team="GameView.Team.*" xmlns:Match="GameView.Match.*">
	
	<fx:Declarations>
		<s:DropShadowFilter id="shadowNormal" distance="2" angle="90" blurX="1" blurY="1"/>
		<s:GlowFilter id="glowNormal" strength="1" alpha="0.7" blurX="10" blurY="10" color="#FFFFFF"/>
	</fx:Declarations>	
	
	<fx:Style source="../styles.css" />
	
	<s:states>
		<s:State name="Empty" />
		<s:State name="OutOfCredit" />
		<s:State name="AvailableCredit" />
	</s:states>
	
	<fx:Script><![CDATA[
		import GameModel.CompetitionModel;
		import GameModel.MainGameModel;
		
		import GameView.ImportantMessageDialog;
		import GameView.PromotedDialog;
		import GameView.Skins.DefaultPanelSkin;
		
		import mx.binding.utils.BindingUtils;
		import mx.events.FlexEvent;
		
		import utils.TimeUtils;
		
		protected function AddedToStageHandler(event:Event):void
		{
			GameMetrics.ReportEvent(GameMetrics.VIEW_COMPETITION);

			// Se produce el AddedToStage antes q el CreationComplete (solo la primera vez, luego no se produce mas el CreationComplete, claro)
			if (mCompetitionModel != null)
			{
				mCompetitionModel.RefreshGroup(OnGroupRefreshed);
				mCompetitionModel.RefreshSeasonEndDate();
			}
		}
		
		protected function CreationCompleteHandler(event:FlexEvent):void
		{
			mGameModel = SoccerClient.GetMainGameModel();
			mCompetitionModel = mGameModel.TheCompetitionModel;
			
			BindingUtils.bindSetter(OnHasCreditChanged, mGameModel.TheTicketModel, ["HasCredit"]);
			BindingUtils.bindSetter(OnPromotedChanged, mCompetitionModel, ["TheGroup", "Promoted"] );
			
			mCompetitionModel.RefreshGroup(OnGroupRefreshed);
			mCompetitionModel.RefreshSeasonEndDate();
		}
		
		private function OnHasCreditChanged(hasCredit : Boolean) : void
		{
			if (hasCredit)
				currentState = "AvailableCredit";
			else
				currentState = "OutOfCredit";
		}
		
		private function OnPromotedChanged(bPromoted : Boolean) : void
		{
			if (bPromoted)
			{
				// Podemos mostrar directamente el mensaje porque el Changed no nos llegara 2 veces a true (al producirse el Refresh dentro del modelo,
				// el server lo mandara a false la segunda vez, es decir, el server recuerda lo que nos mando la ultima vez)
				PromotedDialog.Show();
			}
		}
		
		private function OnGroupRefreshed() : void
		{
			if (MyCompetitionList != null)
			{
				MyCompetitionList.selectedItem = mCompetitionModel.GetLocalGroupEntry();
				MyCompetitionList.callLater(EnsureSelectedIsVisible);
			}
		}
		
		private function EnsureSelectedIsVisible() : void
		{
			var idx : int = MyCompetitionList.dataProvider.getItemIndex(mCompetitionModel.GetLocalGroupEntry());
						
			if (idx + 4 < MyCompetitionList.dataProvider.length)
				idx += 4;
			else
				idx = MyCompetitionList.dataProvider.length-1;
			
			try {			
				MyCompetitionList.ensureIndexIsVisible(idx);
			} catch(e:Error) {}
		}

		[Bindable]
		private var mCompetitionModel : CompetitionModel;
		private var mGameModel : MainGameModel;

	]]></fx:Script>
		
	<s:Panel skinClass="GameView.Skins.DefaultPanelSkin" top="10" bottom="10" left="10" width="740" title="COMPETICIÃ“N">
		<s:BitmapImage source="@Embed(source='/Assets/General.swf', symbol='CompeticionCabeceraFondo')" fillMode="clip" />
		
		<Competition:DivisionBadge x="0" y="0" Division="{mCompetitionModel.TheGroup.DivisionName}" />
				
		<s:Label width="72" x="112" y="53" text="GRUPO: {mCompetitionModel.TheGroup.GroupName}" styleName="whiteBoldBig" textAlign="left" />
		<!--<s:Label id="MyGroupNameLabel" text="" width="72" x="148" y="41" styleName="whiteBoldVeryBig" textAlign="center" />-->
		
		<s:Group right="0" top="18">
			<s:layout>
				<s:HorizontalLayout gap="0" />
			</s:layout>
			<s:Group>
				<s:layout>
					<s:VerticalLayout horizontalAlign="center" gap="4" />
				</s:layout>
				<s:Label width="154" text="FIN DE TEMPORADA EN:" styleName="whiteBoldMedium" textAlign="center" color="#c3c3c3" filters="{[shadowNormal]}" />
				<s:BitmapImage source="@Embed(source='/Assets/General.swf', symbol='CompeticionCabeceraLinea')" fillMode="clip" />
				<s:Label width="154" text="{TimeUtils.ConvertSecondsToStringVerbose(mCompetitionModel.RemainingSeasonSeconds)}" 
						 styleName="whiteBoldVeryBig" textAlign="center" filters="{[glowNormal]}" />	
			</s:Group>
			<s:Group>
				<s:layout>
					<s:VerticalLayout horizontalAlign="center" gap="4" />
				</s:layout>
				<s:Label width="154" text="ASCENSO A PARTIR DE:" styleName="whiteBoldMedium" textAlign="center" color="#c3c3c3" filters="{[shadowNormal]}" />
				<s:BitmapImage source="@Embed(source='/Assets/General.swf', symbol='CompeticionCabeceraLinea')" fillMode="clip" />
				<s:Label width="154" text="{mCompetitionModel.TheGroup.MinimumPoints} Ptos" styleName="whiteBoldVeryBig" textAlign="center" filters="{[glowNormal]}" />	
			</s:Group>
		</s:Group>

		<s:List id="MyCompetitionList" left="0" right="0" top="105" bottom="10"
				dataProvider="{mCompetitionModel.TheGroup.GroupEntries}" skinClass="GameView.Competition.CompetitionListSkin"		
				itemRenderer="GameView.Competition.CompetitionGroupItem" useVirtualLayout="true"/>
		
		<Competition:LookingForMatchPanel x="0" y="0" includeIn="AvailableCredit" />

	</s:Panel>
	
	
	
	<s:Label id="MyOutOfCredit" right="10" y="29" text="OUT OF CREDIT BLAH BLAH" includeIn="OutOfCredit" styleName="whiteBoldMedium" />

</s:Group>