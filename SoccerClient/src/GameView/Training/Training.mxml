<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:GameView="GameView.*"
		 xmlns:Training="GameView.Training.*"
		 width="100%" height="100%"
		 creationComplete="CreationCompleteHandler(event)"
		 addedToStage="AddedToStageHandler(event)">
	
	<fx:Script><![CDATA[
		import GameModel.MainGameModel;
		import GameModel.TeamPurchaseModel;
		import GameModel.TrainingModel;
		
		import GameView.HierarchyUtils;
		
		import HttpService.TransferModel.vo.PendingTraining;
		
		import mx.binding.utils.BindingUtils;
		import mx.events.FlexEvent;
		
		protected function AddedToStageHandler(event:Event):void
		{
			GameMetrics.ReportPageView(GameMetrics.VIEW_TRAINING);
		}
		
		protected function CreationCompleteHandler(event:FlexEvent):void
		{
			mMainGameModel = SoccerClient.GetMainGameModel();	
			mTrainingModel = mMainGameModel.TheTrainingModel;
			mTeamPurchaseModel = mMainGameModel.TheTeamPurchaseModel;
			
			for (var c:int=0; c < MyTrainingItemsGroup.numElements; c++)
			{
				var trItem : TrainingItem = MyTrainingItemsGroup.getElementAt(c) as TrainingItem;
				
				if (trItem != null)
					trItem.TheTrainingDefinition = mTrainingModel.TrainingDefinitions[c];
			}
			
			BindingUtils.bindSetter(PendingTrainingChanged, mMainGameModel.TheTeamModel, ["TheTeam", "PendingTraining"]);
			BindingUtils.bindSetter(TrainerChanged, mMainGameModel.TheTeamPurchaseModel, ["HasTrainer"]);
		}
		
		protected function Trainingitem_clickHandler(event:MouseEvent):void
		{
			var theTrainingItem : TrainingItem = (event.currentTarget as TrainingItem);
			
			if (theTrainingItem.currentState == "Normal")
			{
				var trainingName : String = (event.currentTarget as TrainingItem).TheTrainingDefinition.Name;
				GameMetrics.ReportEvent(GameMetrics.DO_TRAINING, {'training':trainingName});
				mTrainingModel.Train(trainingName, null);			
			}
		}
		
		private function TrainerChanged(hasTrainer : Boolean) : void
		{
			if (hasTrainer)
			{
				for (var c:int=0; c < MyTrainingItemsGroup.numElements; c++)
				{
					var trItem : TrainingItem = MyTrainingItemsGroup.getElementAt(c) as TrainingItem;
					trItem.currentState = "NotAvailable";
				}
			}
			else
			{
				if (mMainGameModel.TheTeamModel.TheTeam != null) 
					PendingTrainingChanged(mMainGameModel.TheTeamModel.TheTeam.PendingTraining);
			}
		}
		
		private function PendingTrainingChanged(currTraining : PendingTraining) : void
		{
			if (currTraining != null)
			{
				for (var c:int=0; c < MyTrainingItemsGroup.numElements; c++)
				{
					var trItem : TrainingItem = MyTrainingItemsGroup.getElementAt(c) as TrainingItem;
					
					if (trItem != null)
					{
						if (trItem.TheTrainingDefinition.TrainingDefinitionID == currTraining.TrainingDefinition.TrainingDefinitionID)
							trItem.currentState = "Training";
						else
							trItem.currentState = "NotAvailable";
					}
				}
			}
			else
			{
				for (c=0; c < MyTrainingItemsGroup.numElements; c++)
				{
					trItem = MyTrainingItemsGroup.getElementAt(c) as TrainingItem;
					
					if (trItem != null)
						trItem.currentState = "Normal";
				}	
			}				
		}
		
		[Bindable] private var mMainGameModel : MainGameModel;
		[Bindable] private var mTrainingModel : TrainingModel;
		[Bindable] private var mTeamPurchaseModel : TeamPurchaseModel;
		
	]]></fx:Script>
	
	<s:Panel title="{resourceManager.getString('main','TrainingPanelTitle')}" skinClass="GameView.Skins.DefaultPanelSkin" top="10" left="10" width="740" height="470">

		<s:controlBarContent>
			<GameView:HelpCallout HelpText="{resourceManager.getString('main','TrainingPanelTxt')}" visible="{resourceManager.getBoolean('main','TicketsPanelVisible')}"/>
		</s:controlBarContent>
		
		<s:Label x="20" y="14" width="700" text="{resourceManager.getString('main','TrainingPanelTxt')}" styleName="whiteBoldBig" textAlign="center" 
				 visible="{!resourceManager.getBoolean('main','TicketsPanelVisible')}"/>

		<s:Group x="10" y="64" id="MyTrainingItemsGroup">
			<s:layout>
				<s:TileLayout columnWidth="355" rowHeight="115" horizontalGap="10" verticalGap="10"/>
			</s:layout>
			
			<Training:TrainingItem click="Trainingitem_clickHandler(event)"/>
			<Training:TrainingItem click="Trainingitem_clickHandler(event)"/>
			<Training:TrainingItem click="Trainingitem_clickHandler(event)"/>
			
			<Training:TrainingItem click="Trainingitem_clickHandler(event)"/>
			<Training:TrainingItem click="Trainingitem_clickHandler(event)"/>
			<Training:TrainingItem click="Trainingitem_clickHandler(event)"/>
		</s:Group>
		
		<Training:TrainerPanel id="MyTrainerPanel" y="0" horizontalCenter="0" visible="{resourceManager.getBoolean('main','TicketsPanelVisible')}" />
				
	</s:Panel>	
	
</s:Group>