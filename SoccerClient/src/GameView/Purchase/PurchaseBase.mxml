<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="CreationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import GameModel.MainGameModel;
			import GameModel.TeamPurchaseModel;
			
			import com.facebook.graph.Facebook;
			
			import mx.core.FlexGlobals;
			import mx.core.IFlexModule;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.Group;
			
			import utils.Delegate;
			
			
			public static function ShowPurchase(theClass : Class) : void
			{
				/* Las "usamos" aqui para que linke */
				new PurchaseSkillPoints();
				new PurchaseTicket();
				new PurchaseTrainer();
				
				var inst : Group = new theClass() as Group;
				var parent : Sprite = FlexGlobals.topLevelApplication as Sprite;
				
				inst.moduleFactory = IFlexModule(parent).moduleFactory;
				
				PopUpManager.addPopUp(inst, parent, true, null);
				PopUpManager.centerPopUp(inst);
			}
			
			protected function CreationCompleteHandler(event:FlexEvent):void
			{
				mGameModel = SoccerClient.GetMainGameModel();
				mTeamPurchaseModel = mGameModel.TheTeamPurchaseModel;				
			}

			
			public function CloseClickHandler(event:MouseEvent):void
			{
				PopUpManager.removePopUp(this);
			}
			
			protected function ProcessPurchase(orderInfo : String) : void
			{
				GameMetrics.ReportEvent(GameMetrics.PURCHASE_SELECTED, {item: orderInfo});
				
				var obj : Object = {
					order_info: orderInfo,
					purchase_type: 'buy_item',
					dev_purchase_params: {'oscif': true}		 // JSON Object
				};
				
				Facebook.ui("pay", obj, Delegate.create(PurchaseCallback, orderInfo));
			}
						
			private function PurchaseCallback(ret : Object, orderInfo : String) : Boolean
			{
				var bRet : Boolean = false;
				
				if (ret['order_id']) 
				{
					GameMetrics.ReportEvent(GameMetrics.PURCHASE_SUCCESS, {item: orderInfo, priceInFBCredits: mTeamPurchaseModel.GetPriceInCreditsForItem(orderInfo)});
					GameMetrics.Increment(GameMetrics.PEOPLE_NUM_PURCHASES, 1);
					GameMetrics.TrackMoney(mTeamPurchaseModel.GetPriceInCreditsForItem(orderInfo));
					
					SoccerClient.GetMainGameModel().TheTeamModel.RefreshTeam(OnTeamRefreshedSuccessfulPurchase);
					currentState = "Success";
					
					bRet = true;
				}
				else
				{
					if (ret["error_code"] == "1383010")
					{
						GameMetrics.ReportEvent(GameMetrics.PURCHASE_CANCELED, {item: orderInfo});
						currentState = "Canceled";
					}
					else
					{
						GameMetrics.ReportEvent(GameMetrics.PURCHASE_FAILURE, {item: orderInfo, errorCode: ret["error_code"] });
						currentState = "Failure";
					}
				}
				
				return bRet;
			}
			
			private function OnTeamRefreshedSuccessfulPurchase() : void
			{
			}
			
			[Bindable]
			protected var mTeamPurchaseModel : TeamPurchaseModel;
			protected var mGameModel : MainGameModel;
		]]>
	</fx:Script>
	
</s:Group>
