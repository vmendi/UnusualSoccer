<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 creationComplete="CreationCompleteHandler(event)"
		 xmlns:Team="GameView.Team.*" xmlns:GameView="GameView.*"
		 width="356" height="212">
	
	<fx:Style source="../styles.css"/>
		
	<fx:Script><![CDATA[
		import GameView.AnimatableDialog;
		import GameModel.MatchResultUtils;
		import GameModel.TeamModel;
		
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		
		public static function Show(matchResult : Object) : void
		{
			var dialog : MatchEndDialog = AnimatableDialog.Show(getDefinitionByName("GameView.Match::MatchEndDialog") as Class) as MatchEndDialog;
	
			dialog.mTeamModel = SoccerClient.GetMainGameModel().TheTeamModel; 
			dialog.mMatchResult = matchResult;
			dialog.mWinner =  MatchResultUtils.AmITheWinner(matchResult, dialog.mTeamModel);
			dialog.mOpponentName = MatchResultUtils.GetOpponentResult(matchResult, dialog.mTeamModel).Name;
		}
				
		protected function AceptarClickHandler(event:MouseEvent):void
		{
			if ((MatchResultUtils.GetMyResult(mMatchResult, mTeamModel).InjuredSoccerPlayers as ArrayCollection).length != 0)
				AnimatableDialog.Dismiss(this, ShowInjuredDialog);
			else
				AnimatableDialog.Dismiss(this, null);
		}
		
		private function ShowInjuredDialog() : void
		{
			InjuredDialog.Show(mMatchResult);
		}
		
		protected function PublicarClickHandler(event:MouseEvent):void
		{
			AceptarClickHandler(event);
			
			var msgToPublish : Object = (currentState == "WinnerAbandoned") ? 
										PublishMessages.PUBLISH_MESSAGE_ABANDONO : PublishMessages.PUBLISH_MESSAGE_PARTIDOGANADO;
			
			msgToPublish.daDescription = (msgToPublish.daDescription as String).replace("CONTRARIO", mOpponentName);
			msgToPublish.daDescription = (msgToPublish.daDescription as String).replace("RESULTADO", mMatchResult.ResultPlayer1.Goals + 
																									 "-" + 
																									 mMatchResult.ResultPlayer2.Goals);			
			PublishMessages.Publish(msgToPublish);
		}
				
		protected function CreationCompleteHandler(event:Event):void
		{
			// WasTooManyTimes: Estos dos jugadores han jugado ya mas de N veces en el dia de hoy, asi que no les damos puntos.
			// WasJust: el resultado es justo... o sea, q la diff de niveles no era exagerada, o q sí lo era pero gano o empato el de menor nivel
			// WasAbandonedSameIP: Los dos jugadores tenían la misma IP
			// WasAbandoned: 
			
			if (mMatchResult.WasAbandonedSameIP)
			{
				currentState = "SameIP";
				// El abandono de mi contrario debería favorecerme a mi, pero ha sido ilegal
				mTitular = "¡ HA HABIDO UN ABANDONO !";
				mSpeech = "Ambos jugadores estáis en la misma red, por lo que no habrá reparto de puntos. ";
			}
			else 
			{			
				if (mWinner)
				{
					if (mMatchResult.WasAbandoned)
					{
						if (mMatchResult.WasJust)
						{
							// Mi contrincante ha abandonado y me merezco los puntos
							if (!mMatchResult.WasTooManyTimes)
							{
								mTitular = "¡ TU RIVAL HA ABANDONADO !";
								mSpeech = "Seguro que no ha podido soportar la presión.";
								currentState = "WinnerAbandoned";
							}
							else
							{
								mTitular = "¡ TU RIVAL HA ABANDONADO !";
								mSpeech = "Pero no habrá reparto de puntos porque has superado el número máximo de partidos diarios que puedes jugar contra este rival.";
								currentState = "WinnerAbandoned";
							}
						}
						else
						{
							// Mi contrintante ha abandonado pero no me merezco los puntos
							mTitular = "¡ TU RIVAL HA ABANDONADO !";
							mSpeech = "Tu habilidad es muy superior a la suya y no habrá reparto de puntos ¡Métete con alguien de tu tamaño!";
							currentState = "NoJust";
						}
					}
					else
					{
						if (mMatchResult.WasJust)
						{
							// He ganado a mi contrincante y me merezco los puntos
							if (!mMatchResult.WasTooManyTimes)
							{
								mTitular = "¡ HAS GANADO !";
								mSpeech = "¡Enhorabuena! Estos son los puntos que obtienes.";
								currentState = "Winner";
							}
							else
							{
								mTitular = "¡ HAS GANADO !";
								mSpeech = "Pero no habrá reparto de puntos porque has superado el número máximo de partidos diarios que puedes jugar contra este rival.";
								currentState = "Winner";
							}
						}
						else
						{
							// He ganado a mi contrincante pero no me merezco los puntos
							mTitular = "¡ HAS GANADO !";
							mSpeech = "Tu habilidad es muy superior a la suya y no habrá reparto de puntos ¡Busca rivales de tu mismo nivel!";
							currentState = "NoJust";
						}
					}
				}
				else
				{
					if (mMatchResult.WasAbandoned)
					{
						if (mMatchResult.WasJust)
						{
							// He abandonado
							mTitular = "¡ HAS ABANDONADO !";
							mSpeech = "";
							currentState = "Loser";
						}
						else
						{
							// He abandonado, pero nadie se lleva nada
							mTitular = "¡ HAS ABANDONADO !";
							mSpeech = "";
							currentState = "Loser";
						}
					}
					else
					{
						if (mMatchResult.WasJust)
						{
							// Ha ganado mi contrincante y se merece los puntos	
							mTitular = "¡ RESULTADO !";
							mSpeech = "";
							currentState = "Loser";
						}
						else
						{
							// Ha ganado mi contrincante pero no se merece ningún punto
							mTitular = "¡ RESULTADO !";
							mSpeech = "";
							currentState = "Loser";
						}
					}
				}
			}
			
			var teams : Array = [ mMatchResult.ResultPlayer1, mMatchResult.ResultPlayer2 ];
			
			for (var c:int = 0; c < 2; c++)
			{
				this["MyName"+c.toString()].text = teams[c].Name;
				this["MyPredefinedTeamName"+c.toString()].text = teams[c].PredefinedTeamName;
				(this["MyBadge" + c.toString()] as BadgeTeam).TeamName = teams[c].PredefinedTeamName;
				this["MyGoals"+c.toString()].text = teams[c].Goals;				
				this["MyXP"+c.toString()].text = (teams[c].DiffXP <= 0? "" : "+") + teams[c].DiffXP;
				this["MySkillPoints"+c.toString()].text = (teams[c].DiffSkillPoints <= 0? "" : "+") + teams[c].DiffSkillPoints;
				this["MyTrueSkill"+c.toString()].text = (teams[c].DiffTrueSkill <= 0? "" : "+") + teams[c].DiffTrueSkill;
			}			
		}		
		
		private var mMatchResult : Object;
		private var mWinner : Boolean;
		private var mOpponentName : String;
		
		[Bindable] private var mTitular : String;
		[Bindable] private var mSpeech : String;
		
		[Bindable] private var mTeamModel : TeamModel;
		
	]]></fx:Script>
	
	<s:states>
		<s:State name="SameIP"/>
		<s:State name="NoJust"/>
		<s:State name="Loser"/>
		<s:State name="Winner"/>
		<s:State name="WinnerAbandoned"/>
	</s:states>		

	<GameView:PopupBackground width="356" height="252" />

	<s:Group x="2" y="98">
		<s:Rect x="0" y="0" width="352" height="81" alpha="1" includeIn="LookingForMatch">
			<s:fill>
				<s:SolidColor color="#353536"/>
			</s:fill>
		</s:Rect>
		<s:Line x="175" yFrom="0" yTo="80">
			<s:stroke>
				<s:SolidColorStroke color="0x000000" weight="1"/>
			</s:stroke>
		</s:Line>
	</s:Group>
	
	<s:Group x="10" y="12" width="336" height="55">
		<s:layout><s:VerticalLayout gap="2" verticalAlign="middle"/></s:layout>
		<s:Label width="100%" 
				 text="{mTitular}" 
				 textAlign="center" styleName="whiteBoldVeryBig" id="PopupTitular" />

		<s:Label width="100%"
				 text="{mSpeech}" 
				 textAlign="center" styleName="whiteBoldBig" id="PopupTexto" excludeFrom="Loser" />
	</s:Group>
	
	<s:Group x="15" y="77">
		<GameView:BadgeTeam id="MyBadge0" />
		<s:Label left="40" top="7" width="100" maxDisplayedLines="1" text="Nombre" styleName="whiteBoldBig" id="MyName0"/>
		<s:Label left="40" top="23" text="Equipo" styleName="greyBoldMedium" id="MyPredefinedTeamName0"/>
		<s:Label width="35" left="122" top="7" text="3" styleName="whiteBoldHuge" textAlign="right" id="MyGoals0"/>
	</s:Group>	

	
	<s:Group x="22" y="134">
		<s:layout><s:VerticalLayout gap="3"/></s:layout>
		<s:Label width="50" text="123" styleName="whiteBoldBig" textAlign="left" text="{resourceManager.getString('main','GeneralXP')}" />
		<s:Label width="50" text="123" styleName="whiteBoldBig" textAlign="left" text="{resourceManager.getString('main','GeneralUnusualPoints')}" />
		<s:Label width="50" text="123" styleName="whiteBoldBig" textAlign="left" text="{resourceManager.getString('main','GeneralUnusualSkill')}" />
	</s:Group>	
	<s:Group x="114" y="134">
		<s:layout><s:VerticalLayout gap="3"/></s:layout>
		<s:Label width="50" text="123" styleName="whiteBoldBig" textAlign="right" id="MyXP0"/>
		<s:Label width="50" text="123" styleName="whiteBoldBig" textAlign="right" id="MySkillPoints0"/>
		<s:Label width="50" text="123" styleName="whiteBoldBig" textAlign="right" id="MyTrueSkill0"/>
	</s:Group>
	
	<s:Group width="160" x="184" y="77">
		<GameView:BadgeTeam id="MyBadge1" right="0" />
		<s:Label right="40" top="7" width="100" maxDisplayedLines="1" text="Nombre" styleName="whiteBoldBig" textAlign="right" id="MyName1"/>
		<s:Label right="40" top="23" text="Equipo" styleName="greyBoldMedium" textAlign="right" id="MyPredefinedTeamName1" />
		<s:Label width="35" top="7" text="0" styleName="whiteBoldHuge" textAlign="left" id="MyGoals1"/>
	</s:Group>	

	<s:Group right="162" y="134">
		<s:layout><s:VerticalLayout gap="3"/></s:layout>
		<s:Label width="50" text="123" styleName="whiteBoldBig" textAlign="left" text="{resourceManager.getString('main','GeneralXP')}" />
		<s:Label width="50" text="123" styleName="whiteBoldBig" textAlign="left" text="{resourceManager.getString('main','GeneralUnusualPoints')}" />
		<s:Label width="50" text="123" styleName="whiteBoldBig" textAlign="left" text="{resourceManager.getString('main','GeneralUnusualSkill')}" />
	</s:Group>	
	<s:Group right="21" y="134">
		<s:layout><s:VerticalLayout gap="3"/></s:layout>
		<s:Label width="50" text="245" styleName="whiteBoldBig" textAlign="right" id="MyXP1"/>
		<s:Label width="50" text="245" styleName="whiteBoldBig" textAlign="right" id="MySkillPoints1"/>
		<s:Label width="50" text="245" styleName="whiteBoldBig" textAlign="right" id="MyTrueSkill1"/>
	</s:Group>	
	
	<s:Group left="20" right="20" y="216">
		<s:layout><s:HorizontalLayout horizontalAlign="center" gap="20" /></s:layout>
		<s:Button label="Publicar" click="PublicarClickHandler(event)" minWidth="80" skinClass="GameView.Skins.ButtonDarkGreySkin" includeIn="Winner, WinnerAbandoned" />
		<s:Button label="Continuar" label.Winner="Saltar" label.WinnerAbandoned="Saltar" 
				  click="AceptarClickHandler(event)" minWidth="80" skinClass="GameView.Skins.ButtonDarkGreySkin" />
	</s:Group>	
	
</s:Group>
