<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 creationComplete="CreationCompleteHandler(event)"
		 xmlns:Team="GameView.Team.*" xmlns:GameView="GameView.*"
		 xmlns:Competition="GameView.Competition.*" xmlns:Match="GameView.Match.*" xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Style source="../styles.css"/>
		
	<fx:Script><![CDATA[
		import GameModel.CompetitionModel;
		import GameModel.MatchResultUtils;
		import GameModel.TeamModel;
		
		import GameView.AnimatableDialog;
		
		import mx.collections.ArrayCollection;
		import mx.collections.ArrayList;
		
		public static function Show(matchResult : Object) : void
		{
			var dialog : MatchEndDialog = AnimatableDialog.Show(getDefinitionByName("GameView.Match::MatchEndDialog") as Class) as MatchEndDialog;
	
			dialog.mTeamModel = SoccerClient.GetMainGameModel().TheTeamModel; 
			dialog.mCompetitionModel = SoccerClient.GetMainGameModel().TheCompetitionModel;
			dialog.mMatchResult = matchResult;
			dialog.mWinner =  MatchResultUtils.AmITheWinner(matchResult, dialog.mTeamModel);
			dialog.mOpponentName = MatchResultUtils.GetOpponentResult(matchResult, dialog.mTeamModel).Name;
		}
				
		protected function AceptarClickHandler(event:MouseEvent):void
		{
			if ((MatchResultUtils.GetMyResult(mMatchResult, mTeamModel).InjuredSoccerPlayers as ArrayCollection).length != 0)
				AnimatableDialog.Dismiss(this, ShowInjuredDialog);
			else
				AnimatableDialog.Dismiss(this, null);
		}
		
		private function ShowInjuredDialog() : void
		{
			InjuredDialog.Show(mMatchResult);
		}
		
		protected function PublicarClickHandler(event:MouseEvent):void
		{
			AceptarClickHandler(event);
			
			var msgToPublish : Object = PublishMessages.BuildMatchEndPublishMessage(currentState == "WinnerByAbandon");
			
			// Hacemos los reemplazos, la mismas palabras (CONTRARIO, RESULTADO) para todos los idiomas
			msgToPublish.daDescription = (msgToPublish.daDescription as String).replace("CONTRARIO", mOpponentName);
			msgToPublish.daDescription = (msgToPublish.daDescription as String).replace("RESULTADO", mMatchResult.ResultPlayer1.Goals + 
																									 "-" + 
																									 mMatchResult.ResultPlayer2.Goals);			
			PublishMessages.Publish(msgToPublish);
		}
				
		protected function CreationCompleteHandler(event:Event):void
		{
			//
			// WasTooManyTimes: Estos dos jugadores han jugado ya mas de N veces en el dia de hoy, asi que no les damos puntos.
			// WasJust: el resultado es justo... o sea, q la diff de niveles no era exagerada, o q sí lo era pero gano o empato el de menor nivel
			// WasAbandoned: Ha habido un abandono. Como no tenemos boton de abandonar, sera siempre el del oponente.
			// WasAbandonedSameIP: Los dos jugadores tenían la misma IP
			//
			if (mMatchResult.WasAbandonedSameIP)
			{
				currentState = "SameIP";
				
				mTitular = resourceManager.getString("main", "MatchEndGenericAbandonTit");
				mSpeech = resourceManager.getString("main", "MatchEndAbandonSameIP");
			}
			else 
			{			
				if (mWinner)
				{
					if (mMatchResult.WasAbandoned)
					{
						if (mMatchResult.WasJust)
						{
							// Mi contrincante ha abandonado y me merezco los puntos
							if (!mMatchResult.WasTooManyTimes)
							{
								mTitular = resourceManager.getString("main", "MatchEndOpponentAbandonedTit");
								mSpeech = resourceManager.getString("main", "MatchEndMsg01"); ;
								currentState = "WinnerByAbandon";
							}
							else
							{
								// Mi contrincante ha abandonado pero no hay reparto de puntos porque habeis jugado TooManyTimes
								mTitular = resourceManager.getString("main", "MatchEndOpponentAbandonedTit");
								mSpeech = resourceManager.getString("main", "MatchEndMsg02");
								currentState = "WinnerByAbandon";
							}
						}
						else
						{
							// Mi contrintante ha abandonado pero no me merezco los puntos (injusto)
							mTitular = resourceManager.getString("main", "MatchEndOpponentAbandonedTit");
							mSpeech = resourceManager.getString("main", "MatchEndMsg03");
							currentState = "NoJust";
						}
					}
					else
					{
						if (mMatchResult.WasJust)
						{
							// He ganado a mi contrincante y me merezco los puntos
							if (!mMatchResult.WasTooManyTimes)
							{
								mTitular = resourceManager.getString("main", "MatchEndYouWonTit");
								mSpeech = resourceManager.getString("main", "MatchEndMsg04");
								currentState = "Winner";
							}
							else
							{
								// He ganado, pero ya he jugado demasiadas veces con el mismo
								mTitular = resourceManager.getString("main", "MatchEndYouWonTit");
								mSpeech = resourceManager.getString("main", "MatchEndMsg05");
								currentState = "Winner";
							}
						}
						else
						{
							// He ganado a mi contrincante pero no me merezco los puntos
							mTitular = resourceManager.getString("main", "MatchEndYouWonTit");
							mSpeech = resourceManager.getString("main", "MatchEndMsg06");
							currentState = "NoJust";
						}
					}
				}
				else	// Soy el perdedor
				{
					if (mMatchResult.WasAbandoned)
					{
						if (mMatchResult.WasJust)
						{
							// He abandonado
							mTitular = resourceManager.getString("main", "MatchEndYouAbandonedTit");
							mSpeech = "";
							currentState = "Loser";
						}
						else
						{
							// He abandonado, pero nadie se lleva nada
							mTitular = resourceManager.getString("main", "MatchEndYouAbandonedTit");
							mSpeech = "";
							currentState = "Loser";
						}
					}
					else
					{
						if (mMatchResult.WasJust)
						{
							// Ha ganado mi contrincante y se merece los puntos	
							mTitular = resourceManager.getString("main", "MatchEndResultTit");
							mSpeech = "";
							currentState = "Loser";
						}
						else
						{
							// Ha ganado mi contrincante pero no se merece ningún punto
							mTitular = resourceManager.getString("main", "MatchEndResultTit");
							mSpeech = "";
							currentState = "Loser";
						}
					}
				}
			}
			
			var teams : Array = [ mMatchResult.ResultPlayer1, mMatchResult.ResultPlayer2 ];
			
			for (var c:int = 0; c < 2; c++)
			{
				this["MyName"+c.toString()].text = teams[c].Name;
				this["MyPredefinedTeamName"+c.toString()].text = teams[c].PredefinedTeamName;
				(this["MyBadge" + c.toString()] as BadgeTeam).TeamName = teams[c].PredefinedTeamName;
				this["MyGoals"+c.toString()].text = teams[c].Goals;				
				this["MyXP"+c.toString()].text = (teams[c].DiffXP <= 0? "" : "+") + teams[c].DiffXP;
				this["MySkillPoints"+c.toString()].text = (teams[c].DiffSkillPoints <= 0? "" : "+") + teams[c].DiffSkillPoints;
				this["MyTrueSkill"+c.toString()].text = (teams[c].DiffTrueSkill <= 0? "" : "+") + teams[c].DiffTrueSkill;
			}			
		}		
				
		[Bindable] private var mTitular : String;
		[Bindable] private var mSpeech : String;
		
		[Bindable] private var mMatchResult : Object;
		[Bindable] private var mWinner : Boolean;
		[Bindable] private var mOpponentName : String;
		
		[Bindable] private var mTeamModel : TeamModel;
		[Bindable] private var mCompetitionModel : CompetitionModel;
		
	]]></fx:Script>
	
	<s:states>
		<s:State name="SameIP"/>
		<s:State name="NoJust"/>
		<s:State name="Loser"/>
		<s:State name="Winner"/>
		<s:State name="WinnerByAbandon"/>
	</s:states>

	<GameView:PopupBackground width="402" top="-15" bottom="-15" />
	<Competition:DivisionBadge x="-60" y="0" Division="{mCompetitionModel.TheGroup.DivisionName}" visible="{MatchResultUtils.IsCompetition(mMatchResult)}" />
	
	<s:Label top="15" horizontalCenter="0" 
			 text="{MatchResultUtils.IsCompetition(mMatchResult) ? resourceManager.getString('main','MatchEndDialogCompetition') : resourceManager.getString('main','MatchEndDialogFriendly')}"
			 styleName="whiteBoldHuge" textAlign="center">
		<s:filters>
			<s:GlowFilter id="glowNormal" strength="1" alpha="0.7" blurX="10" blurY="10" color="#FFFFFF"/>
		</s:filters>
	</s:Label>
	
	<s:Group top="70" horizontalCenter="0">
		<s:layout>
			<s:VerticalLayout gap="15" horizontalAlign="center" />
		</s:layout>

		<s:Group width="336">
			<s:layout><s:VerticalLayout gap="2" verticalAlign="middle"/></s:layout>
			<s:Label width="100%" 
					 text="{mTitular}" 
					 textAlign="center" styleName="whiteBoldVeryBig" id="PopupTitular" />
			
			<s:Label width="100%"
					 text="{mSpeech}" 
					 textAlign="center" styleName="whiteBoldBig" id="PopupTexto" excludeFrom="Loser" />
		</s:Group>
		
		<s:Group width="350">
			<!-- LEFT TEAM -->
			<s:Group left="0">
				<GameView:BadgeTeam id="MyBadge0" />
				<s:Label left="40" top="7" width="120" maxDisplayedLines="1" text="Nombre" styleName="whiteBoldBig" id="MyName0"/>
				<s:Label left="40" top="23" text="Equipo" styleName="greyBoldMedium" id="MyPredefinedTeamName0"/>
				<s:Label width="35" left="122" top="7" text="3" styleName="whiteBoldHuge" textAlign="right" id="MyGoals0"/>
			</s:Group>
			<!-- RIGHT TEAM -->
			<s:Group right="0">
				<GameView:BadgeTeam id="MyBadge1" right="0" />
				<s:Label right="40" top="7" width="120" maxDisplayedLines="1" text="Nombre" styleName="whiteBoldBig" textAlign="right" id="MyName1"/>
				<s:Label right="40" top="23" text="Equipo" styleName="greyBoldMedium" textAlign="right" id="MyPredefinedTeamName1" />
				<s:Label width="35" top="7" text="0" styleName="whiteBoldHuge" textAlign="left" id="MyGoals1"/>
			</s:Group>	
		</s:Group>
		
		<s:Label horizontalCenter="0" text="{resourceManager.getString('main','MatchEndDialogCompPoints')}: {MatchResultUtils.GetCompetitionPoints(mMatchResult, mTeamModel)}"
				 textAlign="center" styleName="yellowBoldVeryBig"
				 visible="{MatchResultUtils.IsCompetition(mMatchResult)}" />
		
		<s:Group width="350">
			<!-- FONDO -->
			<s:Rect top="-10" left="-10" right="-10" bottom="-10" alpha="1">
				<s:fill>
					<s:SolidColor color="#000000" alpha="0.7"/>
				</s:fill>
			</s:Rect>
			<!-- LEFT TEAM -->
			<s:Group left="0">
				<s:layout>
					<s:HorizontalLayout gap="10" />
				</s:layout>
				<s:Group>
					<s:layout><s:VerticalLayout gap="3"/></s:layout>
					<s:Label width="120" styleName="whiteBoldBig" textAlign="left" text="{resourceManager.getString('main','GeneralXP')}" />
					<s:Label width="120" styleName="whiteBoldBig" textAlign="left" text="{resourceManager.getString('main','GeneralUnusualPoints')}" />
					<s:Label width="120" styleName="whiteBoldBig" textAlign="left" text="{resourceManager.getString('main','GeneralSkill')}" />
				</s:Group>
				<s:Group right="202">
					<s:layout><s:VerticalLayout gap="3" horizontalAlign="right"/></s:layout>
					<s:Label width="30" styleName="whiteBoldBig" textAlign="right" id="MyXP0"/>
					<s:Label width="30" styleName="whiteBoldBig" textAlign="right" id="MySkillPoints0"/>
					<s:Label width="30" styleName="whiteBoldBig" textAlign="right" id="MyTrueSkill0"/>
				</s:Group>
			</s:Group>
			<!-- RIGHT TEAM -->
			<s:Group right="10">
				<s:layout>
					<s:HorizontalLayout gap="10" />
				</s:layout>
				<s:Group>
					<s:layout><s:VerticalLayout gap="3"/></s:layout>
					<s:Label width="120" styleName="whiteBoldBig" textAlign="left" text="{resourceManager.getString('main','GeneralXP')}" />
					<s:Label width="120" styleName="whiteBoldBig" textAlign="left" text="{resourceManager.getString('main','GeneralUnusualPoints')}" />
					<s:Label width="120" styleName="whiteBoldBig" textAlign="left" text="{resourceManager.getString('main','GeneralSkill')}" />
				</s:Group>
				<s:Group>
					<s:layout><s:VerticalLayout gap="3" horizontalAlign="right"/></s:layout>
					<s:Label width="30" styleName="whiteBoldBig" textAlign="right" id="MyXP1"/>
					<s:Label width="30" styleName="whiteBoldBig" textAlign="right" id="MySkillPoints1"/>
					<s:Label width="30" styleName="whiteBoldBig" textAlign="right" id="MyTrueSkill1"/>
				</s:Group>
			</s:Group>
		</s:Group>
		
		<s:Group horizontalCenter="0">
			<s:layout><s:HorizontalLayout horizontalAlign="center" gap="20" /></s:layout>
			<s:Button label="Publicar" click="PublicarClickHandler(event)" minWidth="80" skinClass="GameView.Skins.ButtonDarkGreySkin" includeIn="Winner, WinnerByAbandon" />
			<s:Button label="Continuar" label.Winner="Saltar" label.WinnerByAbandon="Saltar" 
					  click="AceptarClickHandler(event)" minWidth="80" skinClass="GameView.Skins.ButtonDarkGreySkin" />
		</s:Group>
		
	</s:Group>
	
</s:Group>
