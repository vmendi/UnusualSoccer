#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoccerServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SoccerV2")]
	public partial class SoccerDataModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCompetitionDivision(SoccerServer.BDDModel.CompetitionDivision instance);
    partial void UpdateCompetitionDivision(SoccerServer.BDDModel.CompetitionDivision instance);
    partial void DeleteCompetitionDivision(SoccerServer.BDDModel.CompetitionDivision instance);
    partial void InsertTrainingDefinition(SoccerServer.BDDModel.TrainingDefinition instance);
    partial void UpdateTrainingDefinition(SoccerServer.BDDModel.TrainingDefinition instance);
    partial void DeleteTrainingDefinition(SoccerServer.BDDModel.TrainingDefinition instance);
    partial void InsertCompetitionGroupEntry(SoccerServer.BDDModel.CompetitionGroupEntry instance);
    partial void UpdateCompetitionGroupEntry(SoccerServer.BDDModel.CompetitionGroupEntry instance);
    partial void DeleteCompetitionGroupEntry(SoccerServer.BDDModel.CompetitionGroupEntry instance);
    partial void InsertCompetitionGroup(SoccerServer.BDDModel.CompetitionGroup instance);
    partial void UpdateCompetitionGroup(SoccerServer.BDDModel.CompetitionGroup instance);
    partial void DeleteCompetitionGroup(SoccerServer.BDDModel.CompetitionGroup instance);
    partial void InsertCompetitionMatchParticipation(SoccerServer.BDDModel.CompetitionMatchParticipation instance);
    partial void UpdateCompetitionMatchParticipation(SoccerServer.BDDModel.CompetitionMatchParticipation instance);
    partial void DeleteCompetitionMatchParticipation(SoccerServer.BDDModel.CompetitionMatchParticipation instance);
    partial void InsertCompetitionSeason(SoccerServer.BDDModel.CompetitionSeason instance);
    partial void UpdateCompetitionSeason(SoccerServer.BDDModel.CompetitionSeason instance);
    partial void DeleteCompetitionSeason(SoccerServer.BDDModel.CompetitionSeason instance);
    partial void InsertMatch(SoccerServer.BDDModel.Match instance);
    partial void UpdateMatch(SoccerServer.BDDModel.Match instance);
    partial void DeleteMatch(SoccerServer.BDDModel.Match instance);
    partial void InsertMatchParticipation(SoccerServer.BDDModel.MatchParticipation instance);
    partial void UpdateMatchParticipation(SoccerServer.BDDModel.MatchParticipation instance);
    partial void DeleteMatchParticipation(SoccerServer.BDDModel.MatchParticipation instance);
    partial void InsertPendingTraining(SoccerServer.BDDModel.PendingTraining instance);
    partial void UpdatePendingTraining(SoccerServer.BDDModel.PendingTraining instance);
    partial void DeletePendingTraining(SoccerServer.BDDModel.PendingTraining instance);
    partial void InsertPlayer(SoccerServer.BDDModel.Player instance);
    partial void UpdatePlayer(SoccerServer.BDDModel.Player instance);
    partial void DeletePlayer(SoccerServer.BDDModel.Player instance);
    partial void InsertPredefinedTeam(SoccerServer.BDDModel.PredefinedTeam instance);
    partial void UpdatePredefinedTeam(SoccerServer.BDDModel.PredefinedTeam instance);
    partial void DeletePredefinedTeam(SoccerServer.BDDModel.PredefinedTeam instance);
    partial void InsertPurchase(SoccerServer.BDDModel.Purchase instance);
    partial void UpdatePurchase(SoccerServer.BDDModel.Purchase instance);
    partial void DeletePurchase(SoccerServer.BDDModel.Purchase instance);
    partial void InsertRequest(SoccerServer.BDDModel.Request instance);
    partial void UpdateRequest(SoccerServer.BDDModel.Request instance);
    partial void DeleteRequest(SoccerServer.BDDModel.Request instance);
    partial void InsertSession(SoccerServer.BDDModel.Session instance);
    partial void UpdateSession(SoccerServer.BDDModel.Session instance);
    partial void DeleteSession(SoccerServer.BDDModel.Session instance);
    partial void InsertSoccerPlayer(SoccerServer.BDDModel.SoccerPlayer instance);
    partial void UpdateSoccerPlayer(SoccerServer.BDDModel.SoccerPlayer instance);
    partial void DeleteSoccerPlayer(SoccerServer.BDDModel.SoccerPlayer instance);
    partial void InsertSpecialTrainingDefinition(SoccerServer.BDDModel.SpecialTrainingDefinition instance);
    partial void UpdateSpecialTrainingDefinition(SoccerServer.BDDModel.SpecialTrainingDefinition instance);
    partial void DeleteSpecialTrainingDefinition(SoccerServer.BDDModel.SpecialTrainingDefinition instance);
    partial void InsertSpecialTraining(SoccerServer.BDDModel.SpecialTraining instance);
    partial void UpdateSpecialTraining(SoccerServer.BDDModel.SpecialTraining instance);
    partial void DeleteSpecialTraining(SoccerServer.BDDModel.SpecialTraining instance);
    partial void InsertTeam(SoccerServer.BDDModel.Team instance);
    partial void UpdateTeam(SoccerServer.BDDModel.Team instance);
    partial void DeleteTeam(SoccerServer.BDDModel.Team instance);
    partial void InsertTicket(SoccerServer.BDDModel.Ticket instance);
    partial void UpdateTicket(SoccerServer.BDDModel.Ticket instance);
    partial void DeleteTicket(SoccerServer.BDDModel.Ticket instance);
    #endregion
		
		public SoccerDataModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SoccerV2ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SoccerDataModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SoccerDataModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SoccerDataModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SoccerDataModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.CompetitionDivision> CompetitionDivisions
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.CompetitionDivision>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.TrainingDefinition> TrainingDefinitions
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.TrainingDefinition>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.CompetitionGroupEntry> CompetitionGroupEntries
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.CompetitionGroupEntry>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.CompetitionGroup> CompetitionGroups
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.CompetitionGroup>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.CompetitionMatchParticipation> CompetitionMatchParticipations
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.CompetitionMatchParticipation>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.CompetitionSeason> CompetitionSeasons
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.CompetitionSeason>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.Match> Matches
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.Match>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.MatchParticipation> MatchParticipations
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.MatchParticipation>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.PendingTraining> PendingTrainings
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.PendingTraining>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.Player> Players
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.Player>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.PredefinedTeam> PredefinedTeams
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.PredefinedTeam>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.Purchase> Purchases
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.Purchase>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.Request> Requests
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.Request>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.Session> Sessions
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.Session>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.SoccerPlayer> SoccerPlayers
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.SoccerPlayer>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.SpecialTrainingDefinition> SpecialTrainingDefinitions
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.SpecialTrainingDefinition>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.SpecialTraining> SpecialTrainings
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.SpecialTraining>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.Team> Teams
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.Team>();
			}
		}
		
		public System.Data.Linq.Table<SoccerServer.BDDModel.Ticket> Tickets
		{
			get
			{
				return this.GetTable<SoccerServer.BDDModel.Ticket>();
			}
		}
	}
}
namespace SoccerServer.BDDModel
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionDivisions")]
	public partial class CompetitionDivision : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompetitionDivisionID;
		
		private string _DivisionName;
		
		private int _MinimumPoints;
		
		private int _ParentCompetitionDivisionID;
		
		private EntitySet<CompetitionDivision> _CompetitionDivisions;
		
		private EntitySet<CompetitionGroup> _CompetitionGroups;
		
		private EntityRef<CompetitionDivision> _CompetitionDivision1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompetitionDivisionIDChanging(int value);
    partial void OnCompetitionDivisionIDChanged();
    partial void OnDivisionNameChanging(string value);
    partial void OnDivisionNameChanged();
    partial void OnMinimumPointsChanging(int value);
    partial void OnMinimumPointsChanged();
    partial void OnParentCompetitionDivisionIDChanging(int value);
    partial void OnParentCompetitionDivisionIDChanged();
    #endregion
		
		public CompetitionDivision()
		{
			this._CompetitionDivisions = new EntitySet<CompetitionDivision>(new Action<CompetitionDivision>(this.attach_CompetitionDivisions), new Action<CompetitionDivision>(this.detach_CompetitionDivisions));
			this._CompetitionGroups = new EntitySet<CompetitionGroup>(new Action<CompetitionGroup>(this.attach_CompetitionGroups), new Action<CompetitionGroup>(this.detach_CompetitionGroups));
			this._CompetitionDivision1 = default(EntityRef<CompetitionDivision>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionDivisionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompetitionDivisionID
		{
			get
			{
				return this._CompetitionDivisionID;
			}
			set
			{
				if ((this._CompetitionDivisionID != value))
				{
					this.OnCompetitionDivisionIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionDivisionID = value;
					this.SendPropertyChanged("CompetitionDivisionID");
					this.OnCompetitionDivisionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DivisionName
		{
			get
			{
				return this._DivisionName;
			}
			set
			{
				if ((this._DivisionName != value))
				{
					this.OnDivisionNameChanging(value);
					this.SendPropertyChanging();
					this._DivisionName = value;
					this.SendPropertyChanged("DivisionName");
					this.OnDivisionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinimumPoints", DbType="Int NOT NULL")]
		public int MinimumPoints
		{
			get
			{
				return this._MinimumPoints;
			}
			set
			{
				if ((this._MinimumPoints != value))
				{
					this.OnMinimumPointsChanging(value);
					this.SendPropertyChanging();
					this._MinimumPoints = value;
					this.SendPropertyChanged("MinimumPoints");
					this.OnMinimumPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCompetitionDivisionID", DbType="Int NOT NULL")]
		public int ParentCompetitionDivisionID
		{
			get
			{
				return this._ParentCompetitionDivisionID;
			}
			set
			{
				if ((this._ParentCompetitionDivisionID != value))
				{
					if (this._CompetitionDivision1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentCompetitionDivisionIDChanging(value);
					this.SendPropertyChanging();
					this._ParentCompetitionDivisionID = value;
					this.SendPropertyChanged("ParentCompetitionDivisionID");
					this.OnParentCompetitionDivisionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionDivision_CompetitionDivision", Storage="_CompetitionDivisions", ThisKey="CompetitionDivisionID", OtherKey="ParentCompetitionDivisionID")]
		public EntitySet<CompetitionDivision> CompetitionDivisions
		{
			get
			{
				return this._CompetitionDivisions;
			}
			set
			{
				this._CompetitionDivisions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionDivision_CompetitionGroup", Storage="_CompetitionGroups", ThisKey="CompetitionDivisionID", OtherKey="CompetitionDivisionID")]
		public EntitySet<CompetitionGroup> CompetitionGroups
		{
			get
			{
				return this._CompetitionGroups;
			}
			set
			{
				this._CompetitionGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionDivision_CompetitionDivision", Storage="_CompetitionDivision1", ThisKey="ParentCompetitionDivisionID", OtherKey="CompetitionDivisionID", IsForeignKey=true)]
		public CompetitionDivision CompetitionDivision1
		{
			get
			{
				return this._CompetitionDivision1.Entity;
			}
			set
			{
				CompetitionDivision previousValue = this._CompetitionDivision1.Entity;
				if (((previousValue != value) 
							|| (this._CompetitionDivision1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompetitionDivision1.Entity = null;
						previousValue.CompetitionDivisions.Remove(this);
					}
					this._CompetitionDivision1.Entity = value;
					if ((value != null))
					{
						value.CompetitionDivisions.Add(this);
						this._ParentCompetitionDivisionID = value.CompetitionDivisionID;
					}
					else
					{
						this._ParentCompetitionDivisionID = default(int);
					}
					this.SendPropertyChanged("CompetitionDivision1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompetitionDivisions(CompetitionDivision entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionDivision1 = this;
		}
		
		private void detach_CompetitionDivisions(CompetitionDivision entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionDivision1 = null;
		}
		
		private void attach_CompetitionGroups(CompetitionGroup entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionDivision = this;
		}
		
		private void detach_CompetitionGroups(CompetitionGroup entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionDivision = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrainingDefinitions")]
	public partial class TrainingDefinition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrainingDefinitionID;
		
		private string _Name;
		
		private string _Description;
		
		private int _FitnessDelta;
		
		private int _Time;
		
		private EntitySet<PendingTraining> _PendingTrainings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainingDefinitionIDChanging(int value);
    partial void OnTrainingDefinitionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFitnessDeltaChanging(int value);
    partial void OnFitnessDeltaChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    #endregion
		
		public TrainingDefinition()
		{
			this._PendingTrainings = new EntitySet<PendingTraining>(new Action<PendingTraining>(this.attach_PendingTrainings), new Action<PendingTraining>(this.detach_PendingTrainings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingDefinitionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrainingDefinitionID
		{
			get
			{
				return this._TrainingDefinitionID;
			}
			set
			{
				if ((this._TrainingDefinitionID != value))
				{
					this.OnTrainingDefinitionIDChanging(value);
					this.SendPropertyChanging();
					this._TrainingDefinitionID = value;
					this.SendPropertyChanged("TrainingDefinitionID");
					this.OnTrainingDefinitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FitnessDelta", DbType="Int NOT NULL")]
		public int FitnessDelta
		{
			get
			{
				return this._FitnessDelta;
			}
			set
			{
				if ((this._FitnessDelta != value))
				{
					this.OnFitnessDeltaChanging(value);
					this.SendPropertyChanging();
					this._FitnessDelta = value;
					this.SendPropertyChanged("FitnessDelta");
					this.OnFitnessDeltaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingDefinition_PendingTraining", Storage="_PendingTrainings", ThisKey="TrainingDefinitionID", OtherKey="TrainingDefinitionID")]
		public EntitySet<PendingTraining> PendingTrainings
		{
			get
			{
				return this._PendingTrainings;
			}
			set
			{
				this._PendingTrainings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PendingTrainings(PendingTraining entity)
		{
			this.SendPropertyChanging();
			entity.TrainingDefinition = this;
		}
		
		private void detach_PendingTrainings(PendingTraining entity)
		{
			this.SendPropertyChanging();
			entity.TrainingDefinition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionGroupEntries")]
	public partial class CompetitionGroupEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompetitionGroupEntryID;
		
		private int _CompetitionGroupID;
		
		private int _TeamID;
		
		private int _NumMatchesPlayed;
		
		private int _NumMatchesWon;
		
		private int _NumMatchesDraw;
		
		private int _Points;
		
		private EntitySet<CompetitionMatchParticipation> _CompetitionMatchParticipations;
		
		private EntityRef<CompetitionGroup> _CompetitionGroup;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompetitionGroupEntryIDChanging(int value);
    partial void OnCompetitionGroupEntryIDChanged();
    partial void OnCompetitionGroupIDChanging(int value);
    partial void OnCompetitionGroupIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnNumMatchesPlayedChanging(int value);
    partial void OnNumMatchesPlayedChanged();
    partial void OnNumMatchesWonChanging(int value);
    partial void OnNumMatchesWonChanged();
    partial void OnNumMatchesDrawChanging(int value);
    partial void OnNumMatchesDrawChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    #endregion
		
		public CompetitionGroupEntry()
		{
			this._CompetitionMatchParticipations = new EntitySet<CompetitionMatchParticipation>(new Action<CompetitionMatchParticipation>(this.attach_CompetitionMatchParticipations), new Action<CompetitionMatchParticipation>(this.detach_CompetitionMatchParticipations));
			this._CompetitionGroup = default(EntityRef<CompetitionGroup>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionGroupEntryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompetitionGroupEntryID
		{
			get
			{
				return this._CompetitionGroupEntryID;
			}
			set
			{
				if ((this._CompetitionGroupEntryID != value))
				{
					this.OnCompetitionGroupEntryIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionGroupEntryID = value;
					this.SendPropertyChanged("CompetitionGroupEntryID");
					this.OnCompetitionGroupEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionGroupID", DbType="Int NOT NULL")]
		public int CompetitionGroupID
		{
			get
			{
				return this._CompetitionGroupID;
			}
			set
			{
				if ((this._CompetitionGroupID != value))
				{
					if (this._CompetitionGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompetitionGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionGroupID = value;
					this.SendPropertyChanged("CompetitionGroupID");
					this.OnCompetitionGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumMatchesPlayed", DbType="Int NOT NULL")]
		public int NumMatchesPlayed
		{
			get
			{
				return this._NumMatchesPlayed;
			}
			set
			{
				if ((this._NumMatchesPlayed != value))
				{
					this.OnNumMatchesPlayedChanging(value);
					this.SendPropertyChanging();
					this._NumMatchesPlayed = value;
					this.SendPropertyChanged("NumMatchesPlayed");
					this.OnNumMatchesPlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumMatchesWon", DbType="Int NOT NULL")]
		public int NumMatchesWon
		{
			get
			{
				return this._NumMatchesWon;
			}
			set
			{
				if ((this._NumMatchesWon != value))
				{
					this.OnNumMatchesWonChanging(value);
					this.SendPropertyChanging();
					this._NumMatchesWon = value;
					this.SendPropertyChanged("NumMatchesWon");
					this.OnNumMatchesWonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumMatchesDraw", DbType="Int NOT NULL")]
		public int NumMatchesDraw
		{
			get
			{
				return this._NumMatchesDraw;
			}
			set
			{
				if ((this._NumMatchesDraw != value))
				{
					this.OnNumMatchesDrawChanging(value);
					this.SendPropertyChanging();
					this._NumMatchesDraw = value;
					this.SendPropertyChanged("NumMatchesDraw");
					this.OnNumMatchesDrawChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionGroupEntry_CompetitionMatchParticipation", Storage="_CompetitionMatchParticipations", ThisKey="CompetitionGroupEntryID", OtherKey="CompetitionGroupEntryID")]
		public EntitySet<CompetitionMatchParticipation> CompetitionMatchParticipations
		{
			get
			{
				return this._CompetitionMatchParticipations;
			}
			set
			{
				this._CompetitionMatchParticipations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionGroup_CompetitionGroupEntry", Storage="_CompetitionGroup", ThisKey="CompetitionGroupID", OtherKey="CompetitionGroupID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CompetitionGroup CompetitionGroup
		{
			get
			{
				return this._CompetitionGroup.Entity;
			}
			set
			{
				CompetitionGroup previousValue = this._CompetitionGroup.Entity;
				if (((previousValue != value) 
							|| (this._CompetitionGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompetitionGroup.Entity = null;
						previousValue.CompetitionGroupEntries.Remove(this);
					}
					this._CompetitionGroup.Entity = value;
					if ((value != null))
					{
						value.CompetitionGroupEntries.Add(this);
						this._CompetitionGroupID = value.CompetitionGroupID;
					}
					else
					{
						this._CompetitionGroupID = default(int);
					}
					this.SendPropertyChanged("CompetitionGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_CompetitionGroupEntry", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.CompetitionGroupEntries.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.CompetitionGroupEntries.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompetitionMatchParticipations(CompetitionMatchParticipation entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionGroupEntry = this;
		}
		
		private void detach_CompetitionMatchParticipations(CompetitionMatchParticipation entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionGroupEntry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionGroups")]
	public partial class CompetitionGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompetitionGroupID;
		
		private int _CompetitionDivisionID;
		
		private string _GroupName;
		
		private int _CompetitionSeasonID;
		
		private System.DateTime _CreationDate;
		
		private EntitySet<CompetitionGroupEntry> _CompetitionGroupEntries;
		
		private EntityRef<CompetitionDivision> _CompetitionDivision;
		
		private EntityRef<CompetitionSeason> _CompetitionSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompetitionGroupIDChanging(int value);
    partial void OnCompetitionGroupIDChanged();
    partial void OnCompetitionDivisionIDChanging(int value);
    partial void OnCompetitionDivisionIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnCompetitionSeasonIDChanging(int value);
    partial void OnCompetitionSeasonIDChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    #endregion
		
		public CompetitionGroup()
		{
			this._CompetitionGroupEntries = new EntitySet<CompetitionGroupEntry>(new Action<CompetitionGroupEntry>(this.attach_CompetitionGroupEntries), new Action<CompetitionGroupEntry>(this.detach_CompetitionGroupEntries));
			this._CompetitionDivision = default(EntityRef<CompetitionDivision>);
			this._CompetitionSeason = default(EntityRef<CompetitionSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompetitionGroupID
		{
			get
			{
				return this._CompetitionGroupID;
			}
			set
			{
				if ((this._CompetitionGroupID != value))
				{
					this.OnCompetitionGroupIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionGroupID = value;
					this.SendPropertyChanged("CompetitionGroupID");
					this.OnCompetitionGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionDivisionID", DbType="Int NOT NULL")]
		public int CompetitionDivisionID
		{
			get
			{
				return this._CompetitionDivisionID;
			}
			set
			{
				if ((this._CompetitionDivisionID != value))
				{
					if (this._CompetitionDivision.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompetitionDivisionIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionDivisionID = value;
					this.SendPropertyChanged("CompetitionDivisionID");
					this.OnCompetitionDivisionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionSeasonID", DbType="Int NOT NULL")]
		public int CompetitionSeasonID
		{
			get
			{
				return this._CompetitionSeasonID;
			}
			set
			{
				if ((this._CompetitionSeasonID != value))
				{
					if (this._CompetitionSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompetitionSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionSeasonID = value;
					this.SendPropertyChanged("CompetitionSeasonID");
					this.OnCompetitionSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionGroup_CompetitionGroupEntry", Storage="_CompetitionGroupEntries", ThisKey="CompetitionGroupID", OtherKey="CompetitionGroupID")]
		public EntitySet<CompetitionGroupEntry> CompetitionGroupEntries
		{
			get
			{
				return this._CompetitionGroupEntries;
			}
			set
			{
				this._CompetitionGroupEntries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionDivision_CompetitionGroup", Storage="_CompetitionDivision", ThisKey="CompetitionDivisionID", OtherKey="CompetitionDivisionID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CompetitionDivision CompetitionDivision
		{
			get
			{
				return this._CompetitionDivision.Entity;
			}
			set
			{
				CompetitionDivision previousValue = this._CompetitionDivision.Entity;
				if (((previousValue != value) 
							|| (this._CompetitionDivision.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompetitionDivision.Entity = null;
						previousValue.CompetitionGroups.Remove(this);
					}
					this._CompetitionDivision.Entity = value;
					if ((value != null))
					{
						value.CompetitionGroups.Add(this);
						this._CompetitionDivisionID = value.CompetitionDivisionID;
					}
					else
					{
						this._CompetitionDivisionID = default(int);
					}
					this.SendPropertyChanged("CompetitionDivision");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionSeason_CompetitionGroup", Storage="_CompetitionSeason", ThisKey="CompetitionSeasonID", OtherKey="CompetitionSeasonID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CompetitionSeason CompetitionSeason
		{
			get
			{
				return this._CompetitionSeason.Entity;
			}
			set
			{
				CompetitionSeason previousValue = this._CompetitionSeason.Entity;
				if (((previousValue != value) 
							|| (this._CompetitionSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompetitionSeason.Entity = null;
						previousValue.CompetitionGroups.Remove(this);
					}
					this._CompetitionSeason.Entity = value;
					if ((value != null))
					{
						value.CompetitionGroups.Add(this);
						this._CompetitionSeasonID = value.CompetitionSeasonID;
					}
					else
					{
						this._CompetitionSeasonID = default(int);
					}
					this.SendPropertyChanged("CompetitionSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompetitionGroupEntries(CompetitionGroupEntry entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionGroup = this;
		}
		
		private void detach_CompetitionGroupEntries(CompetitionGroupEntry entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionMatchParticipations")]
	public partial class CompetitionMatchParticipation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchParticipationID;
		
		private int _CompetitionGroupEntryID;
		
		private EntityRef<CompetitionGroupEntry> _CompetitionGroupEntry;
		
		private EntityRef<MatchParticipation> _MatchParticipation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchParticipationIDChanging(int value);
    partial void OnMatchParticipationIDChanged();
    partial void OnCompetitionGroupEntryIDChanging(int value);
    partial void OnCompetitionGroupEntryIDChanged();
    #endregion
		
		public CompetitionMatchParticipation()
		{
			this._CompetitionGroupEntry = default(EntityRef<CompetitionGroupEntry>);
			this._MatchParticipation = default(EntityRef<MatchParticipation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchParticipationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MatchParticipationID
		{
			get
			{
				return this._MatchParticipationID;
			}
			set
			{
				if ((this._MatchParticipationID != value))
				{
					if (this._MatchParticipation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchParticipationIDChanging(value);
					this.SendPropertyChanging();
					this._MatchParticipationID = value;
					this.SendPropertyChanged("MatchParticipationID");
					this.OnMatchParticipationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionGroupEntryID", DbType="Int NOT NULL")]
		public int CompetitionGroupEntryID
		{
			get
			{
				return this._CompetitionGroupEntryID;
			}
			set
			{
				if ((this._CompetitionGroupEntryID != value))
				{
					if (this._CompetitionGroupEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompetitionGroupEntryIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionGroupEntryID = value;
					this.SendPropertyChanged("CompetitionGroupEntryID");
					this.OnCompetitionGroupEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionGroupEntry_CompetitionMatchParticipation", Storage="_CompetitionGroupEntry", ThisKey="CompetitionGroupEntryID", OtherKey="CompetitionGroupEntryID", IsForeignKey=true)]
		public CompetitionGroupEntry CompetitionGroupEntry
		{
			get
			{
				return this._CompetitionGroupEntry.Entity;
			}
			set
			{
				CompetitionGroupEntry previousValue = this._CompetitionGroupEntry.Entity;
				if (((previousValue != value) 
							|| (this._CompetitionGroupEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompetitionGroupEntry.Entity = null;
						previousValue.CompetitionMatchParticipations.Remove(this);
					}
					this._CompetitionGroupEntry.Entity = value;
					if ((value != null))
					{
						value.CompetitionMatchParticipations.Add(this);
						this._CompetitionGroupEntryID = value.CompetitionGroupEntryID;
					}
					else
					{
						this._CompetitionGroupEntryID = default(int);
					}
					this.SendPropertyChanged("CompetitionGroupEntry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchParticipation_CompetitionMatchParticipation", Storage="_MatchParticipation", ThisKey="MatchParticipationID", OtherKey="MatchParticipationID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchParticipation MatchParticipation
		{
			get
			{
				return this._MatchParticipation.Entity;
			}
			set
			{
				MatchParticipation previousValue = this._MatchParticipation.Entity;
				if (((previousValue != value) 
							|| (this._MatchParticipation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchParticipation.Entity = null;
						previousValue.CompetitionMatchParticipation = null;
					}
					this._MatchParticipation.Entity = value;
					if ((value != null))
					{
						value.CompetitionMatchParticipation = this;
						this._MatchParticipationID = value.MatchParticipationID;
					}
					else
					{
						this._MatchParticipationID = default(int);
					}
					this.SendPropertyChanged("MatchParticipation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionSeasons")]
	public partial class CompetitionSeason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompetitionSeasonID;
		
		private System.DateTime _CreationDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<CompetitionGroup> _CompetitionGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompetitionSeasonIDChanging(int value);
    partial void OnCompetitionSeasonIDChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public CompetitionSeason()
		{
			this._CompetitionGroups = new EntitySet<CompetitionGroup>(new Action<CompetitionGroup>(this.attach_CompetitionGroups), new Action<CompetitionGroup>(this.detach_CompetitionGroups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionSeasonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompetitionSeasonID
		{
			get
			{
				return this._CompetitionSeasonID;
			}
			set
			{
				if ((this._CompetitionSeasonID != value))
				{
					this.OnCompetitionSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionSeasonID = value;
					this.SendPropertyChanged("CompetitionSeasonID");
					this.OnCompetitionSeasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompetitionSeason_CompetitionGroup", Storage="_CompetitionGroups", ThisKey="CompetitionSeasonID", OtherKey="CompetitionSeasonID")]
		public EntitySet<CompetitionGroup> CompetitionGroups
		{
			get
			{
				return this._CompetitionGroups;
			}
			set
			{
				this._CompetitionGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompetitionGroups(CompetitionGroup entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionSeason = this;
		}
		
		private void detach_CompetitionGroups(CompetitionGroup entity)
		{
			this.SendPropertyChanging();
			entity.CompetitionSeason = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Matches")]
	public partial class Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchID;
		
		private System.DateTime _DateStarted;
		
		private System.Nullable<System.DateTime> _DateEnded;
		
		private System.Nullable<bool> _WasTooManyTimes;
		
		private System.Nullable<bool> _WasJust;
		
		private System.Nullable<bool> _WasAbandoned;
		
		private System.Nullable<bool> _WasAbandonedSameIP;
		
		private bool _IsFriendly;
		
		private int _MatchDuration;
		
		private int _TurnDuration;
		
		private EntitySet<MatchParticipation> _MatchParticipations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIDChanging(int value);
    partial void OnMatchIDChanged();
    partial void OnDateStartedChanging(System.DateTime value);
    partial void OnDateStartedChanged();
    partial void OnDateEndedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndedChanged();
    partial void OnWasTooManyTimesChanging(System.Nullable<bool> value);
    partial void OnWasTooManyTimesChanged();
    partial void OnWasJustChanging(System.Nullable<bool> value);
    partial void OnWasJustChanged();
    partial void OnWasAbandonedChanging(System.Nullable<bool> value);
    partial void OnWasAbandonedChanged();
    partial void OnWasAbandonedSameIPChanging(System.Nullable<bool> value);
    partial void OnWasAbandonedSameIPChanged();
    partial void OnIsFriendlyChanging(bool value);
    partial void OnIsFriendlyChanged();
    partial void OnMatchDurationChanging(int value);
    partial void OnMatchDurationChanged();
    partial void OnTurnDurationChanging(int value);
    partial void OnTurnDurationChanged();
    #endregion
		
		public Match()
		{
			this._MatchParticipations = new EntitySet<MatchParticipation>(new Action<MatchParticipation>(this.attach_MatchParticipations), new Action<MatchParticipation>(this.detach_MatchParticipations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStarted", DbType="DateTime NOT NULL")]
		public System.DateTime DateStarted
		{
			get
			{
				return this._DateStarted;
			}
			set
			{
				if ((this._DateStarted != value))
				{
					this.OnDateStartedChanging(value);
					this.SendPropertyChanging();
					this._DateStarted = value;
					this.SendPropertyChanged("DateStarted");
					this.OnDateStartedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEnded
		{
			get
			{
				return this._DateEnded;
			}
			set
			{
				if ((this._DateEnded != value))
				{
					this.OnDateEndedChanging(value);
					this.SendPropertyChanging();
					this._DateEnded = value;
					this.SendPropertyChanged("DateEnded");
					this.OnDateEndedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WasTooManyTimes", DbType="Bit")]
		public System.Nullable<bool> WasTooManyTimes
		{
			get
			{
				return this._WasTooManyTimes;
			}
			set
			{
				if ((this._WasTooManyTimes != value))
				{
					this.OnWasTooManyTimesChanging(value);
					this.SendPropertyChanging();
					this._WasTooManyTimes = value;
					this.SendPropertyChanged("WasTooManyTimes");
					this.OnWasTooManyTimesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WasJust", DbType="Bit")]
		public System.Nullable<bool> WasJust
		{
			get
			{
				return this._WasJust;
			}
			set
			{
				if ((this._WasJust != value))
				{
					this.OnWasJustChanging(value);
					this.SendPropertyChanging();
					this._WasJust = value;
					this.SendPropertyChanged("WasJust");
					this.OnWasJustChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WasAbandoned", DbType="Bit")]
		public System.Nullable<bool> WasAbandoned
		{
			get
			{
				return this._WasAbandoned;
			}
			set
			{
				if ((this._WasAbandoned != value))
				{
					this.OnWasAbandonedChanging(value);
					this.SendPropertyChanging();
					this._WasAbandoned = value;
					this.SendPropertyChanged("WasAbandoned");
					this.OnWasAbandonedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WasAbandonedSameIP", DbType="Bit")]
		public System.Nullable<bool> WasAbandonedSameIP
		{
			get
			{
				return this._WasAbandonedSameIP;
			}
			set
			{
				if ((this._WasAbandonedSameIP != value))
				{
					this.OnWasAbandonedSameIPChanging(value);
					this.SendPropertyChanging();
					this._WasAbandonedSameIP = value;
					this.SendPropertyChanged("WasAbandonedSameIP");
					this.OnWasAbandonedSameIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFriendly", DbType="Bit NOT NULL")]
		public bool IsFriendly
		{
			get
			{
				return this._IsFriendly;
			}
			set
			{
				if ((this._IsFriendly != value))
				{
					this.OnIsFriendlyChanging(value);
					this.SendPropertyChanging();
					this._IsFriendly = value;
					this.SendPropertyChanged("IsFriendly");
					this.OnIsFriendlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchDuration", DbType="Int NOT NULL")]
		public int MatchDuration
		{
			get
			{
				return this._MatchDuration;
			}
			set
			{
				if ((this._MatchDuration != value))
				{
					this.OnMatchDurationChanging(value);
					this.SendPropertyChanging();
					this._MatchDuration = value;
					this.SendPropertyChanged("MatchDuration");
					this.OnMatchDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TurnDuration", DbType="Int NOT NULL")]
		public int TurnDuration
		{
			get
			{
				return this._TurnDuration;
			}
			set
			{
				if ((this._TurnDuration != value))
				{
					this.OnTurnDurationChanging(value);
					this.SendPropertyChanging();
					this._TurnDuration = value;
					this.SendPropertyChanged("TurnDuration");
					this.OnTurnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchParticipation", Storage="_MatchParticipations", ThisKey="MatchID", OtherKey="MatchID")]
		public EntitySet<MatchParticipation> MatchParticipations
		{
			get
			{
				return this._MatchParticipations;
			}
			set
			{
				this._MatchParticipations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchParticipations(MatchParticipation entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_MatchParticipations(MatchParticipation entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MatchParticipations")]
	public partial class MatchParticipation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchParticipationID;
		
		private int _MatchID;
		
		private int _TeamID;
		
		private bool _AsHome;
		
		private int _Goals;
		
		private int _TurnsPlayed;
		
		private EntityRef<CompetitionMatchParticipation> _CompetitionMatchParticipation;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchParticipationIDChanging(int value);
    partial void OnMatchParticipationIDChanged();
    partial void OnMatchIDChanging(int value);
    partial void OnMatchIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnAsHomeChanging(bool value);
    partial void OnAsHomeChanged();
    partial void OnGoalsChanging(int value);
    partial void OnGoalsChanged();
    partial void OnTurnsPlayedChanging(int value);
    partial void OnTurnsPlayedChanged();
    #endregion
		
		public MatchParticipation()
		{
			this._CompetitionMatchParticipation = default(EntityRef<CompetitionMatchParticipation>);
			this._Match = default(EntityRef<Match>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchParticipationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MatchParticipationID
		{
			get
			{
				return this._MatchParticipationID;
			}
			set
			{
				if ((this._MatchParticipationID != value))
				{
					this.OnMatchParticipationIDChanging(value);
					this.SendPropertyChanging();
					this._MatchParticipationID = value;
					this.SendPropertyChanged("MatchParticipationID");
					this.OnMatchParticipationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchID", DbType="Int NOT NULL")]
		public int MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AsHome", DbType="Bit NOT NULL")]
		public bool AsHome
		{
			get
			{
				return this._AsHome;
			}
			set
			{
				if ((this._AsHome != value))
				{
					this.OnAsHomeChanging(value);
					this.SendPropertyChanging();
					this._AsHome = value;
					this.SendPropertyChanged("AsHome");
					this.OnAsHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goals", DbType="Int NOT NULL")]
		public int Goals
		{
			get
			{
				return this._Goals;
			}
			set
			{
				if ((this._Goals != value))
				{
					this.OnGoalsChanging(value);
					this.SendPropertyChanging();
					this._Goals = value;
					this.SendPropertyChanged("Goals");
					this.OnGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TurnsPlayed", DbType="Int NOT NULL")]
		public int TurnsPlayed
		{
			get
			{
				return this._TurnsPlayed;
			}
			set
			{
				if ((this._TurnsPlayed != value))
				{
					this.OnTurnsPlayedChanging(value);
					this.SendPropertyChanging();
					this._TurnsPlayed = value;
					this.SendPropertyChanged("TurnsPlayed");
					this.OnTurnsPlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchParticipation_CompetitionMatchParticipation", Storage="_CompetitionMatchParticipation", ThisKey="MatchParticipationID", OtherKey="MatchParticipationID", IsUnique=true, IsForeignKey=false)]
		public CompetitionMatchParticipation CompetitionMatchParticipation
		{
			get
			{
				return this._CompetitionMatchParticipation.Entity;
			}
			set
			{
				CompetitionMatchParticipation previousValue = this._CompetitionMatchParticipation.Entity;
				if (((previousValue != value) 
							|| (this._CompetitionMatchParticipation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompetitionMatchParticipation.Entity = null;
						previousValue.MatchParticipation = null;
					}
					this._CompetitionMatchParticipation.Entity = value;
					if ((value != null))
					{
						value.MatchParticipation = this;
					}
					this.SendPropertyChanged("CompetitionMatchParticipation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchParticipation", Storage="_Match", ThisKey="MatchID", OtherKey="MatchID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.MatchParticipations.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.MatchParticipations.Add(this);
						this._MatchID = value.MatchID;
					}
					else
					{
						this._MatchID = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_MatchParticipation", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.MatchParticipations.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.MatchParticipations.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PendingTrainings")]
	public partial class PendingTraining : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private int _TrainingDefinitionID;
		
		private System.DateTime _TimeStart;
		
		private System.DateTime _TimeEnd;
		
		private EntityRef<TrainingDefinition> _TrainingDefinition;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnTrainingDefinitionIDChanging(int value);
    partial void OnTrainingDefinitionIDChanged();
    partial void OnTimeStartChanging(System.DateTime value);
    partial void OnTimeStartChanged();
    partial void OnTimeEndChanging(System.DateTime value);
    partial void OnTimeEndChanged();
    #endregion
		
		public PendingTraining()
		{
			this._TrainingDefinition = default(EntityRef<TrainingDefinition>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingDefinitionID", DbType="Int NOT NULL")]
		public int TrainingDefinitionID
		{
			get
			{
				return this._TrainingDefinitionID;
			}
			set
			{
				if ((this._TrainingDefinitionID != value))
				{
					if (this._TrainingDefinition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingDefinitionIDChanging(value);
					this.SendPropertyChanging();
					this._TrainingDefinitionID = value;
					this.SendPropertyChanged("TrainingDefinitionID");
					this.OnTrainingDefinitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStart", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStart
		{
			get
			{
				return this._TimeStart;
			}
			set
			{
				if ((this._TimeStart != value))
				{
					this.OnTimeStartChanging(value);
					this.SendPropertyChanging();
					this._TimeStart = value;
					this.SendPropertyChanged("TimeStart");
					this.OnTimeStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeEnd", DbType="DateTime NOT NULL")]
		public System.DateTime TimeEnd
		{
			get
			{
				return this._TimeEnd;
			}
			set
			{
				if ((this._TimeEnd != value))
				{
					this.OnTimeEndChanging(value);
					this.SendPropertyChanging();
					this._TimeEnd = value;
					this.SendPropertyChanged("TimeEnd");
					this.OnTimeEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingDefinition_PendingTraining", Storage="_TrainingDefinition", ThisKey="TrainingDefinitionID", OtherKey="TrainingDefinitionID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TrainingDefinition TrainingDefinition
		{
			get
			{
				return this._TrainingDefinition.Entity;
			}
			set
			{
				TrainingDefinition previousValue = this._TrainingDefinition.Entity;
				if (((previousValue != value) 
							|| (this._TrainingDefinition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingDefinition.Entity = null;
						previousValue.PendingTrainings.Remove(this);
					}
					this._TrainingDefinition.Entity = value;
					if ((value != null))
					{
						value.PendingTrainings.Add(this);
						this._TrainingDefinitionID = value.TrainingDefinitionID;
					}
					else
					{
						this._TrainingDefinitionID = default(int);
					}
					this.SendPropertyChanged("TrainingDefinition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_PendingTraining", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.PendingTraining = null;
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.PendingTraining = this;
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private string _Name;
		
		private string _Surname;
		
		private long _FacebookID;
		
		private System.DateTime _CreationDate;
		
		private bool _Liked;
		
		private EntitySet<Session> _Sessions;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnFacebookIDChanging(long value);
    partial void OnFacebookIDChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnLikedChanging(bool value);
    partial void OnLikedChanged();
    #endregion
		
		public Player()
		{
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookID", DbType="BigInt NOT NULL")]
		public long FacebookID
		{
			get
			{
				return this._FacebookID;
			}
			set
			{
				if ((this._FacebookID != value))
				{
					this.OnFacebookIDChanging(value);
					this.SendPropertyChanging();
					this._FacebookID = value;
					this.SendPropertyChanged("FacebookID");
					this.OnFacebookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Liked", DbType="Bit NOT NULL")]
		public bool Liked
		{
			get
			{
				return this._Liked;
			}
			set
			{
				if ((this._Liked != value))
				{
					this.OnLikedChanging(value);
					this.SendPropertyChanging();
					this._Liked = value;
					this.SendPropertyChanged("Liked");
					this.OnLikedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Session", Storage="_Sessions", ThisKey="PlayerID", OtherKey="PlayerID")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Team", Storage="_Team", ThisKey="PlayerID", OtherKey="TeamID", IsUnique=true, IsForeignKey=false)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Player = null;
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Player = this;
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PredefinedTeams")]
	public partial class PredefinedTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PredefinedTeamID;
		
		private string _Name;
		
		private EntitySet<Team> _Teams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPredefinedTeamIDChanging(int value);
    partial void OnPredefinedTeamIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PredefinedTeam()
		{
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PredefinedTeamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PredefinedTeamID
		{
			get
			{
				return this._PredefinedTeamID;
			}
			set
			{
				if ((this._PredefinedTeamID != value))
				{
					this.OnPredefinedTeamIDChanging(value);
					this.SendPropertyChanging();
					this._PredefinedTeamID = value;
					this.SendPropertyChanged("PredefinedTeamID");
					this.OnPredefinedTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PredefinedTeam_Team", Storage="_Teams", ThisKey="PredefinedTeamID", OtherKey="PredefinedTeamID")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.PredefinedTeam = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.PredefinedTeam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Purchases")]
	public partial class Purchase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PurchaseID;
		
		private string _ItemID;
		
		private int _Price;
		
		private long _FacebookBuyerID;
		
		private long _FacebookOrderID;
		
		private string _Status;
		
		private System.DateTime _StatusPlacedDate;
		
		private System.Nullable<System.DateTime> _StatusSettledDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchaseIDChanging(int value);
    partial void OnPurchaseIDChanged();
    partial void OnItemIDChanging(string value);
    partial void OnItemIDChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnFacebookBuyerIDChanging(long value);
    partial void OnFacebookBuyerIDChanged();
    partial void OnFacebookOrderIDChanging(long value);
    partial void OnFacebookOrderIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnStatusPlacedDateChanging(System.DateTime value);
    partial void OnStatusPlacedDateChanged();
    partial void OnStatusSettledDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStatusSettledDateChanged();
    #endregion
		
		public Purchase()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PurchaseID
		{
			get
			{
				return this._PurchaseID;
			}
			set
			{
				if ((this._PurchaseID != value))
				{
					this.OnPurchaseIDChanging(value);
					this.SendPropertyChanging();
					this._PurchaseID = value;
					this.SendPropertyChanged("PurchaseID");
					this.OnPurchaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookBuyerID", DbType="BigInt NOT NULL")]
		public long FacebookBuyerID
		{
			get
			{
				return this._FacebookBuyerID;
			}
			set
			{
				if ((this._FacebookBuyerID != value))
				{
					this.OnFacebookBuyerIDChanging(value);
					this.SendPropertyChanging();
					this._FacebookBuyerID = value;
					this.SendPropertyChanged("FacebookBuyerID");
					this.OnFacebookBuyerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookOrderID", DbType="BigInt NOT NULL")]
		public long FacebookOrderID
		{
			get
			{
				return this._FacebookOrderID;
			}
			set
			{
				if ((this._FacebookOrderID != value))
				{
					this.OnFacebookOrderIDChanging(value);
					this.SendPropertyChanging();
					this._FacebookOrderID = value;
					this.SendPropertyChanged("FacebookOrderID");
					this.OnFacebookOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusPlacedDate", DbType="DateTime NOT NULL")]
		public System.DateTime StatusPlacedDate
		{
			get
			{
				return this._StatusPlacedDate;
			}
			set
			{
				if ((this._StatusPlacedDate != value))
				{
					this.OnStatusPlacedDateChanging(value);
					this.SendPropertyChanging();
					this._StatusPlacedDate = value;
					this.SendPropertyChanged("StatusPlacedDate");
					this.OnStatusPlacedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusSettledDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StatusSettledDate
		{
			get
			{
				return this._StatusSettledDate;
			}
			set
			{
				if ((this._StatusSettledDate != value))
				{
					this.OnStatusSettledDateChanging(value);
					this.SendPropertyChanging();
					this._StatusSettledDate = value;
					this.SendPropertyChanged("StatusSettledDate");
					this.OnStatusSettledDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Requests")]
	public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestID;
		
		private int _RequestType;
		
		private System.DateTime _CreationDate;
		
		private System.Nullable<System.DateTime> _AnswerDate;
		
		private string _FacebookRequestID;
		
		private int _SourceTeamID;
		
		private long _TargetFacebookID;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnRequestTypeChanging(int value);
    partial void OnRequestTypeChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnAnswerDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAnswerDateChanged();
    partial void OnFacebookRequestIDChanging(string value);
    partial void OnFacebookRequestIDChanged();
    partial void OnSourceTeamIDChanging(int value);
    partial void OnSourceTeamIDChanged();
    partial void OnTargetFacebookIDChanging(long value);
    partial void OnTargetFacebookIDChanged();
    #endregion
		
		public Request()
		{
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestType", DbType="Int NOT NULL")]
		public int RequestType
		{
			get
			{
				return this._RequestType;
			}
			set
			{
				if ((this._RequestType != value))
				{
					this.OnRequestTypeChanging(value);
					this.SendPropertyChanging();
					this._RequestType = value;
					this.SendPropertyChanged("RequestType");
					this.OnRequestTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AnswerDate
		{
			get
			{
				return this._AnswerDate;
			}
			set
			{
				if ((this._AnswerDate != value))
				{
					this.OnAnswerDateChanging(value);
					this.SendPropertyChanging();
					this._AnswerDate = value;
					this.SendPropertyChanged("AnswerDate");
					this.OnAnswerDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookRequestID", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string FacebookRequestID
		{
			get
			{
				return this._FacebookRequestID;
			}
			set
			{
				if ((this._FacebookRequestID != value))
				{
					this.OnFacebookRequestIDChanging(value);
					this.SendPropertyChanging();
					this._FacebookRequestID = value;
					this.SendPropertyChanged("FacebookRequestID");
					this.OnFacebookRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceTeamID", DbType="Int NOT NULL")]
		public int SourceTeamID
		{
			get
			{
				return this._SourceTeamID;
			}
			set
			{
				if ((this._SourceTeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceTeamIDChanging(value);
					this.SendPropertyChanging();
					this._SourceTeamID = value;
					this.SendPropertyChanged("SourceTeamID");
					this.OnSourceTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetFacebookID", DbType="BigInt NOT NULL")]
		public long TargetFacebookID
		{
			get
			{
				return this._TargetFacebookID;
			}
			set
			{
				if ((this._TargetFacebookID != value))
				{
					this.OnTargetFacebookIDChanging(value);
					this.SendPropertyChanging();
					this._TargetFacebookID = value;
					this.SendPropertyChanged("TargetFacebookID");
					this.OnTargetFacebookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Request", Storage="_Team", ThisKey="SourceTeamID", OtherKey="TeamID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._SourceTeamID = value.TeamID;
					}
					else
					{
						this._SourceTeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sessions")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SessionID;
		
		private int _PlayerID;
		
		private System.DateTime _CreationDate;
		
		private string _FacebookSession;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIDChanging(int value);
    partial void OnSessionIDChanged();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnFacebookSessionChanging(string value);
    partial void OnFacebookSessionChanged();
    #endregion
		
		public Session()
		{
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL")]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookSession", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string FacebookSession
		{
			get
			{
				return this._FacebookSession;
			}
			set
			{
				if ((this._FacebookSession != value))
				{
					this.OnFacebookSessionChanging(value);
					this.SendPropertyChanging();
					this._FacebookSession = value;
					this.SendPropertyChanged("FacebookSession");
					this.OnFacebookSessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Session", Storage="_Player", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SoccerPlayers")]
	public partial class SoccerPlayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SoccerPlayerID;
		
		private int _TeamID;
		
		private string _Name;
		
		private int _DorsalNumber;
		
		private long _FacebookID;
		
		private int _FieldPosition;
		
		private int _Weight;
		
		private int _Sliding;
		
		private int _Power;
		
		private bool _IsInjured;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSoccerPlayerIDChanging(int value);
    partial void OnSoccerPlayerIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDorsalNumberChanging(int value);
    partial void OnDorsalNumberChanged();
    partial void OnFacebookIDChanging(long value);
    partial void OnFacebookIDChanged();
    partial void OnFieldPositionChanging(int value);
    partial void OnFieldPositionChanged();
    partial void OnWeightChanging(int value);
    partial void OnWeightChanged();
    partial void OnSlidingChanging(int value);
    partial void OnSlidingChanged();
    partial void OnPowerChanging(int value);
    partial void OnPowerChanged();
    partial void OnIsInjuredChanging(bool value);
    partial void OnIsInjuredChanged();
    #endregion
		
		public SoccerPlayer()
		{
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoccerPlayerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SoccerPlayerID
		{
			get
			{
				return this._SoccerPlayerID;
			}
			set
			{
				if ((this._SoccerPlayerID != value))
				{
					this.OnSoccerPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._SoccerPlayerID = value;
					this.SendPropertyChanged("SoccerPlayerID");
					this.OnSoccerPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DorsalNumber", DbType="Int NOT NULL")]
		public int DorsalNumber
		{
			get
			{
				return this._DorsalNumber;
			}
			set
			{
				if ((this._DorsalNumber != value))
				{
					this.OnDorsalNumberChanging(value);
					this.SendPropertyChanging();
					this._DorsalNumber = value;
					this.SendPropertyChanged("DorsalNumber");
					this.OnDorsalNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookID", DbType="BigInt NOT NULL")]
		public long FacebookID
		{
			get
			{
				return this._FacebookID;
			}
			set
			{
				if ((this._FacebookID != value))
				{
					this.OnFacebookIDChanging(value);
					this.SendPropertyChanging();
					this._FacebookID = value;
					this.SendPropertyChanged("FacebookID");
					this.OnFacebookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldPosition", DbType="Int NOT NULL")]
		public int FieldPosition
		{
			get
			{
				return this._FieldPosition;
			}
			set
			{
				if ((this._FieldPosition != value))
				{
					this.OnFieldPositionChanging(value);
					this.SendPropertyChanging();
					this._FieldPosition = value;
					this.SendPropertyChanged("FieldPosition");
					this.OnFieldPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Int NOT NULL")]
		public int Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sliding", DbType="Int NOT NULL")]
		public int Sliding
		{
			get
			{
				return this._Sliding;
			}
			set
			{
				if ((this._Sliding != value))
				{
					this.OnSlidingChanging(value);
					this.SendPropertyChanging();
					this._Sliding = value;
					this.SendPropertyChanged("Sliding");
					this.OnSlidingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Power", DbType="Int NOT NULL")]
		public int Power
		{
			get
			{
				return this._Power;
			}
			set
			{
				if ((this._Power != value))
				{
					this.OnPowerChanging(value);
					this.SendPropertyChanging();
					this._Power = value;
					this.SendPropertyChanged("Power");
					this.OnPowerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInjured", DbType="Bit NOT NULL")]
		public bool IsInjured
		{
			get
			{
				return this._IsInjured;
			}
			set
			{
				if ((this._IsInjured != value))
				{
					this.OnIsInjuredChanging(value);
					this.SendPropertyChanging();
					this._IsInjured = value;
					this.SendPropertyChanged("IsInjured");
					this.OnIsInjuredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_SoccerPlayer", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.SoccerPlayers.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.SoccerPlayers.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpecialTrainingDefinitions")]
	public partial class SpecialTrainingDefinition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecialTrainingDefinitionID;
		
		private string _Name;
		
		private string _Description;
		
		private int _RequiredXP;
		
		private int _EnergyStep;
		
		private int _EnergyTotal;
		
		private EntitySet<SpecialTraining> _SpecialTrainings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecialTrainingDefinitionIDChanging(int value);
    partial void OnSpecialTrainingDefinitionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRequiredXPChanging(int value);
    partial void OnRequiredXPChanged();
    partial void OnEnergyStepChanging(int value);
    partial void OnEnergyStepChanged();
    partial void OnEnergyTotalChanging(int value);
    partial void OnEnergyTotalChanged();
    #endregion
		
		public SpecialTrainingDefinition()
		{
			this._SpecialTrainings = new EntitySet<SpecialTraining>(new Action<SpecialTraining>(this.attach_SpecialTrainings), new Action<SpecialTraining>(this.detach_SpecialTrainings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialTrainingDefinitionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpecialTrainingDefinitionID
		{
			get
			{
				return this._SpecialTrainingDefinitionID;
			}
			set
			{
				if ((this._SpecialTrainingDefinitionID != value))
				{
					this.OnSpecialTrainingDefinitionIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialTrainingDefinitionID = value;
					this.SendPropertyChanged("SpecialTrainingDefinitionID");
					this.OnSpecialTrainingDefinitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiredXP", DbType="Int NOT NULL")]
		public int RequiredXP
		{
			get
			{
				return this._RequiredXP;
			}
			set
			{
				if ((this._RequiredXP != value))
				{
					this.OnRequiredXPChanging(value);
					this.SendPropertyChanging();
					this._RequiredXP = value;
					this.SendPropertyChanged("RequiredXP");
					this.OnRequiredXPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnergyStep", DbType="Int NOT NULL")]
		public int EnergyStep
		{
			get
			{
				return this._EnergyStep;
			}
			set
			{
				if ((this._EnergyStep != value))
				{
					this.OnEnergyStepChanging(value);
					this.SendPropertyChanging();
					this._EnergyStep = value;
					this.SendPropertyChanged("EnergyStep");
					this.OnEnergyStepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnergyTotal", DbType="Int NOT NULL")]
		public int EnergyTotal
		{
			get
			{
				return this._EnergyTotal;
			}
			set
			{
				if ((this._EnergyTotal != value))
				{
					this.OnEnergyTotalChanging(value);
					this.SendPropertyChanging();
					this._EnergyTotal = value;
					this.SendPropertyChanged("EnergyTotal");
					this.OnEnergyTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecialTrainingDefinition_SpecialTraining", Storage="_SpecialTrainings", ThisKey="SpecialTrainingDefinitionID", OtherKey="SpecialTrainingDefinitionID")]
		public EntitySet<SpecialTraining> SpecialTrainings
		{
			get
			{
				return this._SpecialTrainings;
			}
			set
			{
				this._SpecialTrainings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SpecialTrainings(SpecialTraining entity)
		{
			this.SendPropertyChanging();
			entity.SpecialTrainingDefinition = this;
		}
		
		private void detach_SpecialTrainings(SpecialTraining entity)
		{
			this.SendPropertyChanging();
			entity.SpecialTrainingDefinition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpecialTrainings")]
	public partial class SpecialTraining : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecialTrainingID;
		
		private int _TeamID;
		
		private int _SpecialTrainingDefinitionID;
		
		private int _EnergyCurrent;
		
		private bool _IsCompleted;
		
		private EntityRef<SpecialTrainingDefinition> _SpecialTrainingDefinition;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecialTrainingIDChanging(int value);
    partial void OnSpecialTrainingIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnSpecialTrainingDefinitionIDChanging(int value);
    partial void OnSpecialTrainingDefinitionIDChanged();
    partial void OnEnergyCurrentChanging(int value);
    partial void OnEnergyCurrentChanged();
    partial void OnIsCompletedChanging(bool value);
    partial void OnIsCompletedChanged();
    #endregion
		
		public SpecialTraining()
		{
			this._SpecialTrainingDefinition = default(EntityRef<SpecialTrainingDefinition>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialTrainingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpecialTrainingID
		{
			get
			{
				return this._SpecialTrainingID;
			}
			set
			{
				if ((this._SpecialTrainingID != value))
				{
					this.OnSpecialTrainingIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialTrainingID = value;
					this.SendPropertyChanged("SpecialTrainingID");
					this.OnSpecialTrainingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialTrainingDefinitionID", DbType="Int NOT NULL")]
		public int SpecialTrainingDefinitionID
		{
			get
			{
				return this._SpecialTrainingDefinitionID;
			}
			set
			{
				if ((this._SpecialTrainingDefinitionID != value))
				{
					if (this._SpecialTrainingDefinition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialTrainingDefinitionIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialTrainingDefinitionID = value;
					this.SendPropertyChanged("SpecialTrainingDefinitionID");
					this.OnSpecialTrainingDefinitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnergyCurrent", DbType="Int NOT NULL")]
		public int EnergyCurrent
		{
			get
			{
				return this._EnergyCurrent;
			}
			set
			{
				if ((this._EnergyCurrent != value))
				{
					this.OnEnergyCurrentChanging(value);
					this.SendPropertyChanging();
					this._EnergyCurrent = value;
					this.SendPropertyChanged("EnergyCurrent");
					this.OnEnergyCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCompleted", DbType="Bit NOT NULL")]
		public bool IsCompleted
		{
			get
			{
				return this._IsCompleted;
			}
			set
			{
				if ((this._IsCompleted != value))
				{
					this.OnIsCompletedChanging(value);
					this.SendPropertyChanging();
					this._IsCompleted = value;
					this.SendPropertyChanged("IsCompleted");
					this.OnIsCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecialTrainingDefinition_SpecialTraining", Storage="_SpecialTrainingDefinition", ThisKey="SpecialTrainingDefinitionID", OtherKey="SpecialTrainingDefinitionID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SpecialTrainingDefinition SpecialTrainingDefinition
		{
			get
			{
				return this._SpecialTrainingDefinition.Entity;
			}
			set
			{
				SpecialTrainingDefinition previousValue = this._SpecialTrainingDefinition.Entity;
				if (((previousValue != value) 
							|| (this._SpecialTrainingDefinition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpecialTrainingDefinition.Entity = null;
						previousValue.SpecialTrainings.Remove(this);
					}
					this._SpecialTrainingDefinition.Entity = value;
					if ((value != null))
					{
						value.SpecialTrainings.Add(this);
						this._SpecialTrainingDefinitionID = value.SpecialTrainingDefinitionID;
					}
					else
					{
						this._SpecialTrainingDefinitionID = default(int);
					}
					this.SendPropertyChanged("SpecialTrainingDefinition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_SpecialTraining", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.SpecialTrainings.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.SpecialTrainings.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teams")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private int _PredefinedTeamID;
		
		private string _Name;
		
		private string _Formation;
		
		private int _TrueSkill;
		
		private int _XP;
		
		private int _SkillPoints;
		
		private int _Energy;
		
		private int _Fitness;
		
		private double _Mean;
		
		private double _StandardDeviation;
		
		private EntitySet<CompetitionGroupEntry> _CompetitionGroupEntries;
		
		private EntitySet<MatchParticipation> _MatchParticipations;
		
		private EntityRef<PendingTraining> _PendingTraining;
		
		private EntitySet<Request> _Requests;
		
		private EntitySet<SoccerPlayer> _SoccerPlayers;
		
		private EntitySet<SpecialTraining> _SpecialTrainings;
		
		private EntityRef<Ticket> _Ticket;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<PredefinedTeam> _PredefinedTeam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnPredefinedTeamIDChanging(int value);
    partial void OnPredefinedTeamIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFormationChanging(string value);
    partial void OnFormationChanged();
    partial void OnTrueSkillChanging(int value);
    partial void OnTrueSkillChanged();
    partial void OnXPChanging(int value);
    partial void OnXPChanged();
    partial void OnSkillPointsChanging(int value);
    partial void OnSkillPointsChanged();
    partial void OnEnergyChanging(int value);
    partial void OnEnergyChanged();
    partial void OnFitnessChanging(int value);
    partial void OnFitnessChanged();
    partial void OnMeanChanging(double value);
    partial void OnMeanChanged();
    partial void OnStandardDeviationChanging(double value);
    partial void OnStandardDeviationChanged();
    #endregion
		
		public Team()
		{
			this._CompetitionGroupEntries = new EntitySet<CompetitionGroupEntry>(new Action<CompetitionGroupEntry>(this.attach_CompetitionGroupEntries), new Action<CompetitionGroupEntry>(this.detach_CompetitionGroupEntries));
			this._MatchParticipations = new EntitySet<MatchParticipation>(new Action<MatchParticipation>(this.attach_MatchParticipations), new Action<MatchParticipation>(this.detach_MatchParticipations));
			this._PendingTraining = default(EntityRef<PendingTraining>);
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			this._SoccerPlayers = new EntitySet<SoccerPlayer>(new Action<SoccerPlayer>(this.attach_SoccerPlayers), new Action<SoccerPlayer>(this.detach_SoccerPlayers));
			this._SpecialTrainings = new EntitySet<SpecialTraining>(new Action<SpecialTraining>(this.attach_SpecialTrainings), new Action<SpecialTraining>(this.detach_SpecialTrainings));
			this._Ticket = default(EntityRef<Ticket>);
			this._Player = default(EntityRef<Player>);
			this._PredefinedTeam = default(EntityRef<PredefinedTeam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PredefinedTeamID", DbType="Int NOT NULL")]
		public int PredefinedTeamID
		{
			get
			{
				return this._PredefinedTeamID;
			}
			set
			{
				if ((this._PredefinedTeamID != value))
				{
					if (this._PredefinedTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPredefinedTeamIDChanging(value);
					this.SendPropertyChanging();
					this._PredefinedTeamID = value;
					this.SendPropertyChanged("PredefinedTeamID");
					this.OnPredefinedTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Formation", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Formation
		{
			get
			{
				return this._Formation;
			}
			set
			{
				if ((this._Formation != value))
				{
					this.OnFormationChanging(value);
					this.SendPropertyChanging();
					this._Formation = value;
					this.SendPropertyChanged("Formation");
					this.OnFormationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrueSkill", DbType="Int NOT NULL")]
		public int TrueSkill
		{
			get
			{
				return this._TrueSkill;
			}
			set
			{
				if ((this._TrueSkill != value))
				{
					this.OnTrueSkillChanging(value);
					this.SendPropertyChanging();
					this._TrueSkill = value;
					this.SendPropertyChanged("TrueSkill");
					this.OnTrueSkillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XP", DbType="Int NOT NULL")]
		public int XP
		{
			get
			{
				return this._XP;
			}
			set
			{
				if ((this._XP != value))
				{
					this.OnXPChanging(value);
					this.SendPropertyChanging();
					this._XP = value;
					this.SendPropertyChanged("XP");
					this.OnXPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillPoints", DbType="Int NOT NULL")]
		public int SkillPoints
		{
			get
			{
				return this._SkillPoints;
			}
			set
			{
				if ((this._SkillPoints != value))
				{
					this.OnSkillPointsChanging(value);
					this.SendPropertyChanging();
					this._SkillPoints = value;
					this.SendPropertyChanged("SkillPoints");
					this.OnSkillPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Energy", DbType="Int NOT NULL")]
		public int Energy
		{
			get
			{
				return this._Energy;
			}
			set
			{
				if ((this._Energy != value))
				{
					this.OnEnergyChanging(value);
					this.SendPropertyChanging();
					this._Energy = value;
					this.SendPropertyChanged("Energy");
					this.OnEnergyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fitness", DbType="Int NOT NULL")]
		public int Fitness
		{
			get
			{
				return this._Fitness;
			}
			set
			{
				if ((this._Fitness != value))
				{
					this.OnFitnessChanging(value);
					this.SendPropertyChanging();
					this._Fitness = value;
					this.SendPropertyChanged("Fitness");
					this.OnFitnessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mean", DbType="Float NOT NULL")]
		public double Mean
		{
			get
			{
				return this._Mean;
			}
			set
			{
				if ((this._Mean != value))
				{
					this.OnMeanChanging(value);
					this.SendPropertyChanging();
					this._Mean = value;
					this.SendPropertyChanged("Mean");
					this.OnMeanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardDeviation", DbType="Float NOT NULL")]
		public double StandardDeviation
		{
			get
			{
				return this._StandardDeviation;
			}
			set
			{
				if ((this._StandardDeviation != value))
				{
					this.OnStandardDeviationChanging(value);
					this.SendPropertyChanging();
					this._StandardDeviation = value;
					this.SendPropertyChanged("StandardDeviation");
					this.OnStandardDeviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_CompetitionGroupEntry", Storage="_CompetitionGroupEntries", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<CompetitionGroupEntry> CompetitionGroupEntries
		{
			get
			{
				return this._CompetitionGroupEntries;
			}
			set
			{
				this._CompetitionGroupEntries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_MatchParticipation", Storage="_MatchParticipations", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<MatchParticipation> MatchParticipations
		{
			get
			{
				return this._MatchParticipations;
			}
			set
			{
				this._MatchParticipations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_PendingTraining", Storage="_PendingTraining", ThisKey="TeamID", OtherKey="TeamID", IsUnique=true, IsForeignKey=false)]
		public PendingTraining PendingTraining
		{
			get
			{
				return this._PendingTraining.Entity;
			}
			set
			{
				PendingTraining previousValue = this._PendingTraining.Entity;
				if (((previousValue != value) 
							|| (this._PendingTraining.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PendingTraining.Entity = null;
						previousValue.Team = null;
					}
					this._PendingTraining.Entity = value;
					if ((value != null))
					{
						value.Team = this;
					}
					this.SendPropertyChanged("PendingTraining");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Request", Storage="_Requests", ThisKey="TeamID", OtherKey="SourceTeamID")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_SoccerPlayer", Storage="_SoccerPlayers", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<SoccerPlayer> SoccerPlayers
		{
			get
			{
				return this._SoccerPlayers;
			}
			set
			{
				this._SoccerPlayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_SpecialTraining", Storage="_SpecialTrainings", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<SpecialTraining> SpecialTrainings
		{
			get
			{
				return this._SpecialTrainings;
			}
			set
			{
				this._SpecialTrainings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Ticket", Storage="_Ticket", ThisKey="TeamID", OtherKey="TicketID", IsUnique=true, IsForeignKey=false)]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.Team = null;
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.Team = this;
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Team", Storage="_Player", ThisKey="TeamID", OtherKey="PlayerID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Team = null;
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Team = this;
						this._TeamID = value.PlayerID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PredefinedTeam_Team", Storage="_PredefinedTeam", ThisKey="PredefinedTeamID", OtherKey="PredefinedTeamID", IsForeignKey=true)]
		public PredefinedTeam PredefinedTeam
		{
			get
			{
				return this._PredefinedTeam.Entity;
			}
			set
			{
				PredefinedTeam previousValue = this._PredefinedTeam.Entity;
				if (((previousValue != value) 
							|| (this._PredefinedTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PredefinedTeam.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._PredefinedTeam.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._PredefinedTeamID = value.PredefinedTeamID;
					}
					else
					{
						this._PredefinedTeamID = default(int);
					}
					this.SendPropertyChanged("PredefinedTeam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompetitionGroupEntries(CompetitionGroupEntry entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_CompetitionGroupEntries(CompetitionGroupEntry entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_MatchParticipations(MatchParticipation entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_MatchParticipations(MatchParticipation entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_SoccerPlayers(SoccerPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_SoccerPlayers(SoccerPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_SpecialTrainings(SpecialTraining entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_SpecialTrainings(SpecialTraining entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tickets")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketID;
		
		private int _RemainingMatches;
		
		private int _TicketKind;
		
		private System.DateTime _TicketPurchaseDate;
		
		private System.DateTime _TicketExpiryDate;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIDChanging(int value);
    partial void OnTicketIDChanged();
    partial void OnRemainingMatchesChanging(int value);
    partial void OnRemainingMatchesChanged();
    partial void OnTicketKindChanging(int value);
    partial void OnTicketKindChanged();
    partial void OnTicketPurchaseDateChanging(System.DateTime value);
    partial void OnTicketPurchaseDateChanged();
    partial void OnTicketExpiryDateChanging(System.DateTime value);
    partial void OnTicketExpiryDateChanged();
    #endregion
		
		public Ticket()
		{
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TicketID
		{
			get
			{
				return this._TicketID;
			}
			set
			{
				if ((this._TicketID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIDChanging(value);
					this.SendPropertyChanging();
					this._TicketID = value;
					this.SendPropertyChanged("TicketID");
					this.OnTicketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemainingMatches", DbType="Int NOT NULL")]
		public int RemainingMatches
		{
			get
			{
				return this._RemainingMatches;
			}
			set
			{
				if ((this._RemainingMatches != value))
				{
					this.OnRemainingMatchesChanging(value);
					this.SendPropertyChanging();
					this._RemainingMatches = value;
					this.SendPropertyChanged("RemainingMatches");
					this.OnRemainingMatchesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketKind", DbType="Int NOT NULL")]
		public int TicketKind
		{
			get
			{
				return this._TicketKind;
			}
			set
			{
				if ((this._TicketKind != value))
				{
					this.OnTicketKindChanging(value);
					this.SendPropertyChanging();
					this._TicketKind = value;
					this.SendPropertyChanged("TicketKind");
					this.OnTicketKindChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketPurchaseDate", DbType="DateTime NOT NULL")]
		public System.DateTime TicketPurchaseDate
		{
			get
			{
				return this._TicketPurchaseDate;
			}
			set
			{
				if ((this._TicketPurchaseDate != value))
				{
					this.OnTicketPurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._TicketPurchaseDate = value;
					this.SendPropertyChanged("TicketPurchaseDate");
					this.OnTicketPurchaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketExpiryDate", DbType="DateTime NOT NULL")]
		public System.DateTime TicketExpiryDate
		{
			get
			{
				return this._TicketExpiryDate;
			}
			set
			{
				if ((this._TicketExpiryDate != value))
				{
					this.OnTicketExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._TicketExpiryDate = value;
					this.SendPropertyChanged("TicketExpiryDate");
					this.OnTicketExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Ticket", Storage="_Team", ThisKey="TicketID", OtherKey="TeamID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Ticket = null;
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Ticket = this;
						this._TicketID = value.TeamID;
					}
					else
					{
						this._TicketID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
