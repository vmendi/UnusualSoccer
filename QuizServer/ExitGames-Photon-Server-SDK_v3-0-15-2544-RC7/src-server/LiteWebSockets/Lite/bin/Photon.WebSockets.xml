<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Photon.WebSockets</name>
    </assembly>
    <members>
        <member name="T:Photon.WebSockets.RpcInitRequest">
            <summary>
            Provides initialization request parameter.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcInitRequest.applicationId">
            <summary>
            The application id.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcInitRequest.clientVersion">
            <summary>
            The client version.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.RpcInitRequest.#ctor(System.String,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.WebSockets.RpcInitRequest"/> class.
            </summary>
            <param name="applicationId">
            The application id.
            </param>
            <param name="clientVersion">
            The client version.
            </param>
        </member>
        <member name="P:Photon.WebSockets.RpcInitRequest.ApplicationId">
            <summary>
            Gets the application id.
            </summary>
            <value>The application id.</value>
        </member>
        <member name="P:Photon.WebSockets.RpcInitRequest.ClientVersion">
            <summary>
            Gets the client version.
            </summary>
            <value>The client version.</value>
        </member>
        <member name="M:Photon.WebSockets.PeerBase.Disconnect">
            <summary>
            Disconnects the peer from the server side.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.PeerBase.InitializeEncryption(System.Byte[])">
            <summary>
            Initializes the peer to receive and send encrypted operations.
            </summary>
            <param name="otherPartyPublicKey">
            The other party public key.
            </param>
            <returns>
            A byte array containing the public key of the created <see cref="P:Photon.WebSockets.PeerBase.CryptoProvider"/> instance.
            The key should be used to initialize cryptography operations on the client site.
            </returns>
        </member>
        <member name="M:Photon.WebSockets.PeerBase.LogEventResponse(System.Int32,System.Byte[],Photon.SocketServer.SendResult)">
            <summary>
            The log event response.
            </summary>
            <param name="channelId">
            The channel id.
            </param>
            <param name="data">
            The data.
            </param>
            <param name="sendResult">
            The send result.
            </param>
        </member>
        <member name="M:Photon.WebSockets.PeerBase.LogOperationResponse(Photon.WebSockets.RpcRequest,System.Byte[],Photon.SocketServer.SendResult)">
            <summary>
            The log operation response.
            </summary>
            <param name="response">
            The response.
            </param>
            <param name="data">
            The data.
            </param>
            <param name="sendResult">
            The send result.
            </param>
        </member>
        <member name="P:Photon.WebSockets.PeerBase.CryptoProvider">
            <summary>
            Gets or sets an <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/> instance used 
            to encrypt and decrypt operation requests.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcResponse.debugMessage">
            <summary>
              The debug message.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcResponse.encrypt">
            <summary>
              Indicates wheter to encrypt the response.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcResponse.errorCode">
            <summary>
              The error code.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcResponse.operationCode">
            <summary>
              The operation code.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.RpcResponse.ChannelId">
            <summary>
              Gets or sets the channel to be used for sending.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.RpcResponse.DebugMessage">
            <summary>
              Gets the debug message. Error code 0 returns typically debug message "Ok".
            </summary>
        </member>
        <member name="P:Photon.WebSockets.RpcResponse.Encrypt">
            <summary>
              Gets a value indicating whether this <see cref="T:Photon.WebSockets.RpcResponse"/> should by encrypted.
            </summary>
            <value><c>true</c> if the operation response will be encrypted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Photon.WebSockets.RpcResponse.ErrorCode">
            <summary>
              Gets the error code. Code 0 means OK.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.RpcResponse.OperationCode">
            <summary>
              Gets the operation code. It allows the client to idenitfy which operation was answered.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.RpcResponse.Params">
            <summary>
              Gets the response parameters.
            </summary>
        </member>
        <member name="T:Photon.WebSockets.Rpc.Protocols.IRpcProtocol">
            <summary>
            The implementation class supports a specific real time server protocol.
            Provided implementations are <see cref="!:Protocol.GpBinaryByte"/> and <see cref="!:Protocol.Amf3"/>.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Protocols.IRpcProtocol.SerializeInitResponse">
            <summary>
            Serialize an init response.
            </summary>
            <returns>
            The serialized init response.
            </returns>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Protocols.IRpcProtocol.TryConvertOperationParameter(Photon.WebSockets.Rpc.Reflection.DataMemberInfo,System.Object@)">
            <summary>
            Since C# supports many more types than the used protocol some parameters need to be converted.
            This method tries to convert an operation request parameter into to a type that works for a target field or property.
            </summary>
            <param name="paramterInfo">
            The paramter info.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            True if value has a valid type.
            </returns>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Protocols.IRpcProtocol.TryParseInitRequest(System.Byte[],Photon.WebSockets.RpcInitRequest@)">
            <summary>
            Tries to parse an init request.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="initRequest">
            The init request.
            </param>
            <returns>
            true if init request has correct format.
            </returns>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Protocols.IRpcProtocol.TryParseOperationRequest(System.Byte[],Photon.SocketServer.Reliability,System.Byte,Photon.WebSockets.RpcRequest@)">
            <summary>
            Tries to parse an <see cref="T:Photon.SocketServer.OperationRequest"/>.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="reliability">
            The reliability.
            </param>
            <param name="channelId">
            The channel id.
            </param>
            <param name="rpcRequest">
            The operation request.
            </param>
            <returns>
            True if request was parsed successfully.
            </returns>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Protocols.IRpcProtocol.TryParseOperationRequest(System.Byte[],Photon.SocketServer.Reliability,System.Byte,Photon.SocketServer.Security.ICryptoProvider,Photon.WebSockets.RpcRequest@)">
            <summary>
            Tries to parse an <see cref="T:Photon.SocketServer.OperationRequest"/>.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="reliability">
            The reliability.
            </param>
            <param name="channelId">
            The channel id.
            </param>
            <param name="cryptoProvider">
            An <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/> instance used to decrypt encrypted operation requests.
            </param>
            <param name="rpcRequest">
            The rpc request.
            </param>
            <returns>
            True if request was parsed successfully.
            </returns>
        </member>
        <member name="T:Photon.WebSockets.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol">
            <summary>
              The GpBinary implementation of <see cref="T:Photon.SocketServer.IRpcProtocol"/>.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.MagicNumber">
            <summary>
              The magic number.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.ParameterCodeDebug">
            <summary>
              The parameter code debug.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.ParameterCodeError">
            <summary>
              The parameter code error.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.ParameterCodeEvent">
            <summary>
              The parameter code event.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.ParameterCodeOperation">
            <summary>
              The parameter code operation.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.headerSize">
            <summary>
              the rts message header size
            </summary>
        </member>
        <member name="F:Photon.WebSockets.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.headerWriter">
            <summary>
              the rts message header writer
            </summary>
        </member>
        <member name="F:Photon.WebSockets.Rpc.Protocols.Json.JsonProtocol.log">
            <summary>
              An <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages to the logging framework.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.Rpc.DataMemberAttribute.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.Rpc.DataMemberAttribute.IsOptional">
            <summary>
            Gets or sets a value indicating whether IsOptional.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.Rpc.DataMemberAttribute.Name">
            <summary>
            Gets or sets the data members name.
            </summary>
        </member>
        <member name="T:Photon.WebSockets.Rpc.Protocols.RtsInitResponseMessage">
            <summary>
            The rts init response message.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.Rpc.Protocols.RtsInitResponseMessage.SizeInBytes">
            <summary>
            The size in bytes.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Protocols.RtsInitResponseMessage.Serialize(System.IO.Stream)">
            <summary>
            The serialize.
            </summary>
            <param name="stream">
            The stream.
            </param>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Protocols.RtsInitResponseMessage.TryParse(System.Byte[],System.Int32)">
            <summary>
            The try parse.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="index">
            The index.
            </param>
            <returns>
            true if successful.
            </returns>
        </member>
        <member name="T:Photon.WebSockets.Rpc.Reflection.DataMemberMapper">
            <summary>
            Provides methods to get and set objects fields and properties per reflection.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DataMemberMapper.GetValues(System.Object)">
            <summary>
            The get values.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            A dictionary with the key/value pairs of error code 1 if a value is null.
            </returns>
            <exception cref="T:System.ArgumentException">
            Mandatory member of <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DataMemberMapper.GetValuesByName(System.Object)">
            <summary>
            Gets a data objects member values as a name value dictionary.
            </summary>
            <param name="source">The data object source.</param>
            <returns>returns a dictionary containing the data objects member values.</returns>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DataMemberMapper.TrySetValuesByCode(System.Object,System.Collections.Hashtable,Photon.WebSockets.Rpc.Reflection.DataMemberMapper.TryConvertDelegate,System.Collections.Generic.List{Photon.WebSockets.Rpc.Reflection.DataMemberInfo}@,System.Collections.Generic.List{Photon.WebSockets.Rpc.Reflection.DataMemberInfo}@)">
            <summary>
            The try set values.
            </summary>
            <param name="target">
            The target.
            </param>
            <param name="values">
            The values.
            </param>
            <param name="convertMethod">
            The convert method.
            </param>
            <param name="missingParams">
            The missing params.
            </param>
            <param name="invalidParams">
            The invalid params.
            </param>
            <returns>
            true if successful.
            </returns>
        </member>
        <member name="T:Photon.WebSockets.Rpc.Reflection.DataMemberMapper.TryConvertDelegate">
            <summary>
            The try convert delegate.
            </summary>
            <param name="targetMember">
            The target member.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            True if value is legal.
            </returns>
        </member>
        <member name="T:Photon.WebSockets.Rpc.Reflection.DataMemberInfo">
            <summary>
            This class contains reflection data about a property or a field. 
            </summary>
        </member>
        <member name="F:Photon.WebSockets.Rpc.Reflection.DataMemberInfo.getterDelegate">
            <summary>
            Delegate used to invoke the field or property get method.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.Rpc.Reflection.DataMemberInfo.setterDelegate">
            <summary>
            Delegate used to invoke the field or property set method.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DataMemberInfo.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.WebSockets.Rpc.Reflection.DataMemberInfo"/> class.
            </summary>
            <param name="fieldInfo">
            The field info.
            </param>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DataMemberInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.WebSockets.Rpc.Reflection.DataMemberInfo"/> class.
            </summary>
            <param name="propertyInfo">
            The property info.
            </param>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DataMemberInfo.#ctor(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.WebSockets.Rpc.Reflection.DataMemberInfo"/> class.
            </summary>
            <param name="memberInfo">
            The member info.
            </param>
            <param name="valueType">
            The value type.
            </param>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DataMemberInfo.GetValue(System.Object)">
            <summary>
            The get value.
            </summary>
            <param name="target">
            The target.
            </param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DataMemberInfo.SetValue(System.Object,System.Object)">
            <summary>
            The set value.
            </summary>
            <param name="target">
            The target.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:Photon.WebSockets.Rpc.Reflection.DataMemberInfo.MemberInfo">
            <summary>
            Gets the member info.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.Rpc.Reflection.DataMemberInfo.TypeCode">
            <summary>
            Gets the members <see cref="P:Photon.WebSockets.Rpc.Reflection.DataMemberInfo.TypeCode"/>.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.Rpc.Reflection.DataMemberInfo.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
        </member>
        <member name="T:Photon.WebSockets.Rpc.Reflection.DataMemberInfoCache">
            <summary>
            A cache for <see cref="T:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1">ObjectMemberInfo</see> instances.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.Rpc.Reflection.DataMemberInfoCache.dictionary">
            <summary>
            The dictionary.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DataMemberInfoCache.GetMembers(System.Type)">
            <summary>
            The get members.
            </summary>
            <param name="targetType">
            The target type.
            </param>
            <returns>
            a list of member infos 
            </returns>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DataMemberInfoCache.GetMemberInfos(System.Type)">
            <summary>
            The get member infos.
            </summary>
            <param name="targetType">
            The target type.
            </param>
            <returns>
            A list of mapped properties.
            </returns>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DelegateFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            Creates a LateBoundMethod delegate from a MethodInfo structure
            Basically creates a dynamic delegate on the fly.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DelegateFactory.Create(System.Type,System.String,System.Type[])">
            <summary>
            Creates a LateBoundMethod from type methodname and parameter signature that
            is turned into a MethodInfo structure and then parsed into a dynamic delegate
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="parameterTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DelegateFactory.CreateGetter(System.Reflection.MemberInfo)">
            <summary>
            Creates a <see cref="T:System.Func`2">getter</see> for a specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo">
            The <see cref="T:System.Reflection.MemberInfo"/> to obtain the <see cref="T:System.Func`2">getter</see> for.
            Must be of type <see cref="T:System.Reflection.FieldInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.
            </param>
            <returns>
            A <see cref="T:System.Func`2">getter</see> instance or null if the specified <see cref="T:System.Reflection.MemberInfo"/> does not contain a get method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            memberInfo is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            memberInfo is not of type <see cref="T:System.Reflection.FieldInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.
            </exception>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DelegateFactory.CreateGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a <see cref="T:System.Func`2">getter</see> for a specified property.
            </summary>
            <param name="propertyInfo">
            The <see cref="T:System.Reflection.PropertyInfo"/> of the property for which to create a <see cref="T:System.Func`2">getter</see>.
            </param>
            <returns>
            A <see cref="T:System.Func`2">getter</see> instance or null if the specified property does 
            not contain a get method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            propertyInfo is a null reference (Nothing in Visual Basic). 
            </exception>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DelegateFactory.CreateGetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a <see cref="T:System.Func`2">getter</see> for a specified field.
            </summary>
            <param name="fieldInfo">
            The <see cref="T:System.Reflection.FieldInfo"/> of the field for which to create a <see cref="T:System.Func`2">getter</see>.
            </param>
            <returns>
            An <see cref="T:System.Func`2">getter</see> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            fieldInfo is a null reference (Nothing in Visual Basic). 
            </exception>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DelegateFactory.CreateInstantiateObjectHandler(System.Type)">
            <summary>
            Creates a <see cref="T:System.Func`1">instantiator</see> for a specified type.
            </summary>
            <param name="type">
            The type for which to create the delegate.
            </param>
            <returns>
            An <see cref="T:System.Func`1">instantiator</see> delegate for acessing the types contructor method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            type paramter is a null reference (Nothing in Visual Basic). 
            </exception>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DelegateFactory.CreateSetter(System.Reflection.MemberInfo)">
            <summary>
            Creates a <see cref="T:System.Action`2">setter</see> for a specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo">
            The <see cref="T:System.Reflection.MemberInfo"/> to obtain the <see cref="T:System.Action`2">setter</see> for.
            Must be of type <see cref="T:System.Reflection.FieldInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.
            </param>
            <returns>
            A <see cref="T:System.Action`2">setter</see> instance or null if the specified <see cref="T:System.Reflection.MemberInfo"/> 
            does not contain a set method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            memberInfo is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            memberInfo is not of type <see cref="T:System.Reflection.FieldInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.
            </exception>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DelegateFactory.CreateSetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a <see cref="T:System.Action`2">setter</see> for a specified field.
            </summary>
            <param name="propertyInfo">
            The <see cref="T:System.Reflection.PropertyInfo"/> of the property for which to create a <see cref="T:System.Action`2">setter</see>.
            </param>
            <returns>
            An <see cref="T:System.Action`2">setter</see> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            propertyInfo is a null reference (Nothing in Visual Basic). 
            </exception>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DelegateFactory.CreateSetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a <see cref="T:System.Action`2">setter</see> for a specified field.
            </summary>
            <param name="fieldInfo">
            The <see cref="T:System.Reflection.FieldInfo"/> of the field for which to create a <see cref="T:System.Action`2">setter</see>.
            </param>
            <returns>
            An <see cref="T:System.Action`2">setter</see> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            fieldInfo is a null reference (Nothing in Visual Basic). 
            </exception>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DelegateFactory.BoxIfNeeded(System.Type,System.Reflection.Emit.ILGenerator)">
            <summary>
            Helper method to generate "Boxing" code for value types.
            </summary>
            <param name="type">
            The type to genrate the code for.
            </param>
            <param name="generator">
            An <see cref="T:System.Reflection.Emit.ILGenerator"/> instance.
            </param>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DelegateFactory.CreateGetDynamicMethod(System.Type)">
            <summary>
            Creates a dynamic get method for a specified type.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            A <see cref="T:System.Reflection.Emit.DynamicMethod"/> instace.
            </returns>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DelegateFactory.CreateSetDynamicMethod(System.Type)">
            <summary>
            Creates a dynamic set method for a specified type.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            A <see cref="T:System.Reflection.Emit.DynamicMethod"/> instace.
            </returns>
        </member>
        <member name="M:Photon.WebSockets.Rpc.Reflection.DelegateFactory.UnboxIfNeeded(System.Type,System.Reflection.Emit.ILGenerator)">
            <summary>
            Helper method to generate "Unboxing" code for value types.
            </summary>
            <param name="type">
            The type to genrate the code for.
            </param>
            <param name="generator">
            An <see cref="T:System.Reflection.Emit.ILGenerator"/> instance.
            </param>
        </member>
        <member name="F:Photon.WebSockets.RpcEventData.channelId">
            <summary>
            The channel id.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcEventData.code">
            <summary>
            The event code.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcEventData.reliability">
            <summary>
            The reliability.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcEventData.sendImmediately">
            <summary>
            The send Immediately.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.RpcEventData.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Photon.SocketServer.Reliability,System.Byte,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.SocketServer.EventData"/> class.
            </summary>
            <param name="code">
            The event Code.
            </param>
            <param name="parameter">
            A Dictionary containing the event paramter.
            </param>
            <param name="reliability">
            The reliability.
            </param>
            <param name="channelId">
            The channel Id.
            </param>
            <param name="sendImmediately">
            The send Immediately.
            </param>
        </member>
        <member name="M:Photon.WebSockets.RpcEventData.Create(System.String,System.Object,Photon.SocketServer.Reliability,System.Byte,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Photon.SocketServer.EventData"/> instance and converts all properties with the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/> of <paramref name="source"/> into event <see cref="P:Photon.WebSockets.RpcEventData.Parameters"/>. 
            </summary>
            <remarks>
            Avoid using code 60 for the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/> as it is already occupied by the available rpc protocols for the <paramref name="eventCode"/>.
            </remarks>
            <param name="eventCode">
            The event code.
            </param>
            <param name="source">
            The source object with the event parameter properties.
            </param>
            <param name="reliability">
            The reliability to send the event with.
            </param>
            <param name="channelId">
            The channel Id to send the event through.
            </param>
            <param name="sendImmediatly">
            Inidicates if the event is sent without delay.
            </param>
            <returns>
            A new EventData instance.
            </returns>
        </member>
        <member name="P:Photon.WebSockets.RpcEventData.ChannelId">
            <summary>
            Gets ChannelId.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.RpcEventData.Code">
            <summary>
            Gets the event code.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.RpcEventData.Parameters">
            <summary>
            Gets the event parameters that will be sent to the client.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.RpcEventData.Reliability">
            <summary>
            Gets the reliability that will be used to send the event to the client.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.RpcEventData.SendImmediately">
            <summary>
            Gets a value indicating whether the peer is flushed after sending this event.
            </summary>
        </member>
        <member name="T:Photon.WebSockets.RpcOperation">
            <summary>
            This class is a common base class for operations that have properties flagged with the <see cref="T:Photon.WebSockets.Rpc.DataMemberAttribute"/>.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcOperation.invalidParams">
            <summary>
            The invalid params.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcOperation.isValid">
            <summary>
            The is valid.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcOperation.missingParams">
            <summary>
            The missing params.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcOperation.request">
            <summary>
            The operation request.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcOperation.errorMessage">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.RpcOperation.#ctor(Photon.WebSockets.RpcRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.WebSockets.RpcOperation"/> class.
            Check the <see cref="P:Photon.WebSockets.RpcOperation.IsValid"/> property after creation to determine 
            if all paramters have been initialized correctly.
            </summary>
            <param name="request">
            The operation request containing the operations paramter values.
            </param>
        </member>
        <member name="M:Photon.WebSockets.RpcOperation.GetErrorMessage">
            <summary>
            Gets a message containing descriptive entries for each missing or invalid paramter.
            </summary>
            <returns>
            A string containing descriptive entries for each missing or invalid paramter.
            </returns>
        </member>
        <member name="P:Photon.WebSockets.RpcOperation.IsValid">
            <summary>
            Gets a value indicating whether all operation parameter are initialized.
            Call the <see cref="M:Photon.WebSockets.RpcOperation.GetErrorMessage"/> method to get a detailed description
            for all missing parameters.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Photon.WebSockets.RpcOperation.OperationRequest">
            <summary>
            Gets OperationRequest.
            </summary>
        </member>
        <member name="T:Photon.WebSockets.RpcRequest">
            <summary>
            Each incoming operation is translated into an <see cref="T:Photon.SocketServer.OperationRequest"/> with <see cref="M:Photon.SocketServer.IRpcProtocol.TryParseOperationRequest(System.Byte[],Photon.SocketServer.OperationRequest@)">IRpcProtocol.TryParseOperationRequest</see>.
            It then is dispatched with <see cref="M:Photon.WebSockets.PeerBase.OnOperationRequest(Photon.WebSockets.RpcRequest)">IPeer.OnOperationRequest</see>.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcRequest.log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcRequest.channelId">
            <summary>
            The channel id.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcRequest.parameter">
            <summary>
            Hashtable containing the operation paramters.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcRequest.reliability">
            <summary>
            The reliability.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcRequest.encrypted">
            <summary>
            Indicates wheter request was received enrypted.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcRequest.timestamp">
            <summary>
            The timestamp.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.RpcRequest.done">
            <summary>
            The done.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.RpcRequest.ElapsedMilliseconds">
            <summary>
            Gets the elapseds time in milliseconds since the operation request has been created.
            </summary>
            <returns>
            The elapseds time in milliseconds.
            </returns>
        </member>
        <member name="M:Photon.WebSockets.RpcRequest.OnCompleted">
            <summary>
            This method should be called when the request is completed in order to update the <see cref="T:Photon.SocketServer.Diagnostics.PhotonCounter"/> counters.
            The <see cref="T:Photon.SocketServer.Rpc.Peer"/> does this automatically if the executing <see cref="T:Photon.SocketServer.Rpc.IOperationHandler"/> returns an <see cref="T:Photon.SocketServer.OperationResponse"/>.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.RpcRequest.ChannelId">
            <summary>
            Gets the request's channel id.
            </summary>
            <value>The channel id.</value>
        </member>
        <member name="P:Photon.WebSockets.RpcRequest.OperationName">
            <summary>
            Gets the request's operation code.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.RpcRequest.Encrypted">
            <summary>
            Gets a value indicating whether this <see cref="T:Photon.SocketServer.OperationRequest"/> was received encrypted.
            </summary>
            <value><c>true</c> if the binary request was encrypted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Photon.WebSockets.RpcRequest.Params">
            <summary>
            Gets the request's parameters.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.RpcRequest.Peer">
            <summary>
            Gets the used <see cref="T:Photon.SocketServer.IRpcProtocol"/>.
            <para>
            The <see cref="T:Photon.SocketServer.Rpc.Operation"/> constructor maps the <see cref="P:Photon.WebSockets.RpcRequest.Params"/> to properties that are flagged with the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/>.
            Since C# supports many more types than the used protocol some parameters need to be converted.
            The <see cref="T:Photon.SocketServer.Protocol"/> property provides the necessary access to the <see cref="M:Photon.SocketServer.IRpcProtocol.TryConvertParameter(Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo{Photon.SocketServer.Rpc.DataMemberAttribute},System.Object@)">IRpcProtocol.TryConvertParameter</see> method.
            </para>
            </summary>
        </member>
        <member name="P:Photon.WebSockets.RpcRequest.Reliability">
            <summary>
            Gets the <see cref="P:Photon.WebSockets.RpcRequest.Reliability"/> of the incoming request.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.ApplicationBase.log">
            <summary>
              An <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages to the logging framework.
            </summary>
        </member>
        <member name="F:Photon.WebSockets.ApplicationBase.operationDataLogger">
            <summary>
              An <see cref="T:ExitGames.Logging.ILogger"/> instance used to log operations to the logging framework.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.ApplicationBase.#cctor">
            <summary>
              Initializes static members of the <see cref="T:Photon.WebSockets.ApplicationBase"/> class.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.ApplicationBase.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.WebSockets.ApplicationBase"/> class.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.ApplicationBase.PhotonHostRuntimeInterfaces#IPhotonApplication#OnOutboundConnectionEstablished(PhotonHostRuntimeInterfaces.IPhotonPeer,System.Object)">
            <summary>
              Callback for established outbound connections.
            </summary>
            <param name = "photonPeer">The photon peer.</param>
            <param name = "userData">The user data.</param>
        </member>
        <member name="M:Photon.WebSockets.ApplicationBase.PhotonHostRuntimeInterfaces#IPhotonApplication#OnOutboundConnectionFailed(PhotonHostRuntimeInterfaces.IPhotonPeer,System.Object,System.Int32,System.String)">
            <summary>
              Callback for failed outbound connections.
            </summary>
            <param name = "photonPeer">
              The photon peer.
            </param>
            <param name = "userData">
              The user data.
            </param>
            <param name = "errorCode">
              The error Code.
            </param>
            <param name = "errorMessage">
              The error message
            </param>
        </member>
        <member name="M:Photon.WebSockets.ApplicationBase.PhotonHostRuntimeInterfaces#IPhotonApplicationControl#OnPhotonRunning">
            <summary>
              This is never called.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.ApplicationBase.PhotonHostRuntimeInterfaces#IPhotonApplicationControl#OnStop">
            <summary>
              This is never called.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.ApplicationBase.PhotonHostRuntimeInterfaces#IPhotonApplicationControl#OnStopRequested">
            <summary>
              This is never called.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.ApplicationBase.CreateWebPeer(Photon.WebSockets.RpcInitRequest)">
            <summary>
              This method is called by the <see cref="M:PhotonHostRuntimeInterfaces.IPhotonApplication.OnInit(PhotonHostRuntimeInterfaces.IPhotonPeer,System.Byte[])">IPhotonApplication.OnInit</see> implementation of this class.
              The inheritor should return an <see cref="T:Photon.WebSockets.PeerBase"/> implementation such as <see cref="T:Photon.SocketServer.Rpc.Peer"/>.
            </summary>
            <param name="initRequest">
              The initialization request.
            </param>
            <returns>
              A new peer
            </returns>
        </member>
        <member name="M:Photon.WebSockets.ApplicationBase.Setup">
            <summary>
              This method is called by the<see cref="M:PhotonHostRuntimeInterfaces.IPhotonApplicationControl.OnStart(System.String,System.String,PhotonHostRuntimeInterfaces.IPhotonApplicationSink)">IPhotonApplicationControl.OnStart</see>implementation of this class.
              The inheritor can setup log4net here and execute other initialization routines here.
            </summary>
            <example>
              log4net initialization:
              <code>
                private static readonly ILogger log = LogManager.GetCurrentClassLogger();
                protected override void Setup()
                {
                var configFileInfo = new FileInfo(Path.Combine(this.BinaryPath, "log4net.config"));
                XmlConfigurator.ConfigureAndWatch(configFileInfo);
                }
              </code>
            </example>
        </member>
        <member name="M:Photon.WebSockets.ApplicationBase.TearDown">
            <summary>
              This method is called by the <see cref="M:PhotonHostRuntimeInterfaces.IPhotonApplicationControl.OnStop">IPhotonApplicationControl.OnStop</see> implementation of this class.
              The inheritor can execute cleanup routines here.
            </summary>
        </member>
        <member name="M:Photon.WebSockets.ApplicationBase.OnCurrentDomainUnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
              Handles the UnhandledException event of the CurrentDomain control.
            </summary>
            <param name="sender">
              The source of the event.
            </param>
            <param name="e">
              The <see cref="T:System.UnhandledExceptionEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="P:Photon.WebSockets.ApplicationBase.ApplicationInstanceName">
            <summary>
              Gets the application instance name.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.ApplicationBase.ApplicationName">
            <summary>
              Gets the application name.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.ApplicationBase.ApplicationPath">
            <summary>
              Gets the application path.
            </summary>
        </member>
        <member name="P:Photon.WebSockets.ApplicationBase.BinaryPath">
            <summary>
              Gets the binary path.
            </summary>
        </member>
    </members>
</doc>
