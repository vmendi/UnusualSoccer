* release_history.txt
* Release history for Exit Games "LiteLobby Application"
(C) 2010 Exit Games GmbH, http://www.exitgames.com

Questions? Visit: 
	http://forum.exitgames.com
	http://developer.exitgames.com
Mail: 
	developer@exitgames.com


*** version 2.4.0
UPDATED: version number (no other changes)

*** Version 2.0.4
- CHANGED: LiteLobbyRoom: Replaced obsolete calls to Operation.PopulateParamters with a check to the new property Operation.IsValid.

*** Version 2.0.1 RC3
- CHANGED: Lite and LiteLobby: renamed AppConfig files to App.config (now you can add your own settings)
- CHANGED: Lite and LiteLobby app config - enabled counter publisher 


*** Version 1.7.0
- CHANGED: LiteEventBase - removed Recipients, Sender and Reliability properties
- CHANGED: Room - replaced Operation and Message Channel by the new methods EnqueuOperation and EnqueueMessage   
- CHANGED: Room PublishEvent methods: Added parameter for recipients(Actors) and reliability.
- RENAMED: Dispatcher to LiteOperationDispatcher
- CHANGED: Dispatcher(LiteOperrationDispatcher): DispatchOperationRequest method returns a boolean value indication if the operation request has been disparched.
- RENAMED: GameCache to RoomCache
- CHANGED: GameCache(RoomCache): GetOrCreateMethod now takes a room creation method to support thread safe room creation of different types.
- RENAMED: RoomActors to ActorCollection
- CHANGED: RoomActors(ActorCollection): Now innerhits from ICollection<Actor>
- RENAMED: All Lite Operations to [Name]Operation
- RENAMED: All Lite Events from Ev[Name] to [Name]Event
- UPDATED: license terms

*** Version 1.6.2
- FIXED: setup included a sample which was not in the package (caused server to shutdown)

*** Version 1.6.1
- FIXED: rare exception in reference counters (PhotonSocketServer.exe) which might cause a crash
- CHANGED: service install is now as "autostart", making sure photon runs after a OS restart
- CHANGED: PhotonControl now requires Admin rights to run to be able to setup counters (and handle the processes)
- ADDED: PhotonControl "open PerfMon" which shows the counters (when installed before photon-start)
- FIXED: client count was not reduced in certain disconnect-scenarios

*** Version 1.6.0
- CHANGED: GetProperties operation - changed Type of property 'PropertyKeys' to IList to support generic property Keys
- ADDED: EvPropertiesChanged event
- CHANGED: SetProperties operation - added optional parameter Broadcast. An EvPropertiesChanged event containing the new property values will sent to all room actors if set to true.
- REMOVED: The Optional and Nullable Attributes for Operation paramters and return values have been removed. To mark a paramter/return value as optinal/nullable use the new properties IsOptional/IsNUllable of the OperationParamter and OperationReturnValue attributes.
- CHANGED: OperationParameterAttribute - added new property IsOptional
- CHANGED: OperationReturnValueAttribute - added new property IsNullable
- ADDED: EventParameter attribute to support automatic event serialization with reflection (like OperationParameter).
- RENAMED: IEvent to ILiteEvent and moved interface declaration to Lite source code.
- CHANGED: LiteEvents now inherits from EventBase. The EventBase class should be used for custom event implementations. 
- CHANGED: IPeer.PublishEvent method paramters to EventData, Reliability

*** Version 1.5.0 
- ADDED: Property 'Properties' to Room and Actor classes. This new property allows to store generic values for a room or an actor.
- ADDED: New Operations 'GetProperties' and 'SetProperties'. This operations allow to get or set custom properties on a room or an actor.
- CHANGED: Join operation has a new optional parameter Properties(Hashtable). The paramter allows to store custom properties in the actor during join.

*** Version 1.4.0 (stable)
- CHANGED: update to the photon C/C++ core engine
- CHANGED: added support for AMF3 binary protocol (Flash 9+), Flash 9+ SDKs are in development and (alpha) released soon
- CHANGED: central solution is the "Lite.SocketApplication.sln" which links the "Lite.sln" Framework. This split was 
			done as the new photon HTTP server can consume the same Lite Framework.
- CHANGED: the code to be stylecop conform (this is at 90% and not completed yet)
- CHANGED: the classes Room, RoomActor are noew available as source in "Lite.sln". This allows better extensibility and 
			transparency for developers.
- CHANGED: Enhanced the counter sub system (support for in memory counters and windows perfromance counters)

*** Version 1.3.2
- fixed bug where received older commands stalled the dispatching for one peer indefinitely (they are now skipped as expected)

*** Version 1.3.1
- changed from sbyte to byte type in Enums.cs, as the server's base is also using unsigned byte and the DotNet clients will, too
- added "Policy" application to SDK to enable cross-domain connections from Flash and Silverlight clients
- added basic documentation for the policy service

*** Version 1.3.0
- updated naming of all server components (now *Photon*)
- added the peer's IP (useful when Photon is a "Master Server" for p2p games). sample in: LiteGame.HandleJoin()
- added the port that a peer connects to (used when an application reacts differently on different ports)
- fixed issue with shutdown (in some cases the service was not stoppable)
- minor updates on HostRuntime
- removed some redundant debug output
- added "Performance monitoring" and "Client SDKs" topics to documentation

*** Version 1.1.3
- changed Room MessageChannel to type IMessage (allows implementation of costum Message classes)
- removed Room ProcessAction method. (Previous actions can be implementated as messages) 
	method ScheduleAction has been renamed to ScheduleMessage respectively+
- removed surplus class "Enums" and put all operation- and event-codes to Enums.cs into namespace Lite.Operations
- removed OperationCode.cs and moved enum of operations to Enums.cs as "OperationCodes"
- renamed list of operation keys "ParameterKey" to ParameterKeys and moved it to Enums.cs and namespace Lite.Operations
- renamed GameMessageCode to GameMessageCodes (for consistency)
- removed several this.function()-calls of methods that could be overridden 
	now used dynamically for overriding classes, depending on type
- removed Settings class (was no longer needed)
- renamed RC_F to RC_FATAL

*** Version 1.1.2
- server is now named "Photon"
- added licensing terms and trial-license file
- use Realtime Server version 1.1.0
- updated documentation

*** Version 1.0.0
- updated to new Realtime architecture (using Retlang message based approach)

*** Version 0.9.0
- Initial SDK release