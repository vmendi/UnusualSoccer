<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kayak.Framework</name>
    </assembly>
    <members>
        <member name="T:Kayak.Framework.IArgumentBinder">
            <summary>
            Binds values to method parameters, possibly reading the request body, and invokes the callback
            when finished. The dictionary will be pre-populated with a keys corresponding to each of the 
            method's parameters.
            </summary>
        </member>
        <member name="T:Kayak.Framework.IResultHandler">
            <summary>
            Does something with the result of a method invocation, possibly writing the response body and 
            completing the response, and invokes the callback when finished.
            </summary>
        </member>
        <member name="T:Kayak.Framework.MappingEventArgs">
            <summary>
            Used to specify an InvocationInfo to InvocationResponder. The InvocationInfo
            is used to construct a KayakInvocation instance.
            </summary>
        </member>
        <member name="T:Kayak.Framework.InvocationEventArgs">
            <summary>
            Raised by InvocationResponder before and after a KayakInvocation is invoked.
            </summary>
        </member>
        <member name="T:Kayak.Framework.KayakInvocation">
            <summary>
            Encapsulates an invocation of a method.
            </summary>
        </member>
        <member name="P:Kayak.Framework.KayakInvocation.Context">
            <summary>
            The KayakContext in which the method is being invoked.
            </summary>
        </member>
        <member name="P:Kayak.Framework.KayakInvocation.Info">
            <summary>
            The method (and instance) being invoked.
            </summary>
        </member>
        <member name="P:Kayak.Framework.KayakInvocation.Binders">
            <summary>
            The IArgumentBinder instances which are called before invocation.
            </summary>
        </member>
        <member name="P:Kayak.Framework.KayakInvocation.Handlers">
            <summary>
            The IResultHandler instance which are called after invocation.
            </summary>
        </member>
        <member name="M:Kayak.Framework.StringCoercionExtensions.ParseDateTime(System.String)">
            <summary>
            Equivalent to DateTime.Parse(), except it accomodates am/pm strings better.
            </summary>
        </member>
        <member name="T:Kayak.Framework.PathAttribute">
            <summary>
            Decorate a method with this attribute to indicate that it should be invoked to handle
            requests for a given path.
            </summary>
        </member>
        <member name="T:Kayak.Framework.VerbAttribute">
            <summary>
            This attribute is used in conjunction with the [Path] attribute to indicate that the method should be
            invoked in response to requests for the path with a particular HTTP verb.
            </summary>
        </member>
        <member name="T:Kayak.Framework.InvocationInfo">
            <summary>
            Represents an invocation of a method on a target object. 
            The type of Target should be assignable to Method.DeclaringType.
            </summary>
        </member>
        <member name="T:Kayak.Framework.RequestBodyAttribute">
            <summary>
            Indicates that a method parameter's value is contained within the request body.
            Useful in scenarios where a method declares one or more parameters intended to
            be populated from the query string, but the values are missing from the query string.
            An argument binder which reads the request body will know to ignore missing params 
            not marked with [RequestBody].
            </summary>
        </member>
        <member name="T:Kayak.Framework.KayakService">
            <summary>
            Classes whose methods are invoked by the Kayak Framework can get access to the current KayakContext
            by extending from this class (alternatively, you declare a public constructor which
            accepts a KayakInvocation as a single argument).
            </summary>
        </member>
        <member name="M:Kayak.Framework.ServerExtensions.UseFramework(Kayak.KayakServer)">
            <summary>
            Sets up the Kayak Framework to respond for the given server, searching the calling assembly
            for methods marked with [Path].
            </summary>
        </member>
        <member name="M:Kayak.Framework.ServerExtensions.UseFramework(Kayak.KayakServer,System.Reflection.Assembly[])">
            <summary>
            Sets up the Kayak Framework to respond for the given server, searching the given assemblies
            for methods marked with [Path].
            </summary>
        </member>
    </members>
</doc>
